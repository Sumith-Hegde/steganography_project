{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n'use strict';\n\nconst is = require('./is');\n/**\n * Weighting to apply when using contain/cover fit.\n * @member\n * @private\n */\n\n\nconst gravity = {\n  center: 0,\n  centre: 0,\n  north: 1,\n  east: 2,\n  south: 3,\n  west: 4,\n  northeast: 5,\n  southeast: 6,\n  southwest: 7,\n  northwest: 8\n};\n/**\n * Position to apply when using contain/cover fit.\n * @member\n * @private\n */\n\nconst position = {\n  top: 1,\n  right: 2,\n  bottom: 3,\n  left: 4,\n  'right top': 5,\n  'right bottom': 6,\n  'left bottom': 7,\n  'left top': 8\n};\n/**\n * How to extend the image.\n * @member\n * @private\n */\n\nconst extendWith = {\n  background: 'background',\n  copy: 'copy',\n  repeat: 'repeat',\n  mirror: 'mirror'\n};\n/**\n * Strategies for automagic cover behaviour.\n * @member\n * @private\n */\n\nconst strategy = {\n  entropy: 16,\n  attention: 17\n};\n/**\n * Reduction kernels.\n * @member\n * @private\n */\n\nconst kernel = {\n  nearest: 'nearest',\n  cubic: 'cubic',\n  mitchell: 'mitchell',\n  lanczos2: 'lanczos2',\n  lanczos3: 'lanczos3'\n};\n/**\n * Methods by which an image can be resized to fit the provided dimensions.\n * @member\n * @private\n */\n\nconst fit = {\n  contain: 'contain',\n  cover: 'cover',\n  fill: 'fill',\n  inside: 'inside',\n  outside: 'outside'\n};\n/**\n * Map external fit property to internal canvas property.\n * @member\n * @private\n */\n\nconst mapFitToCanvas = {\n  contain: 'embed',\n  cover: 'crop',\n  fill: 'ignore_aspect',\n  inside: 'max',\n  outside: 'min'\n};\n/**\n * @private\n */\n\nfunction isRotationExpected(options) {\n  return options.angle % 360 !== 0 || options.useExifOrientation === true || options.rotationAngle !== 0;\n}\n/**\n * @private\n */\n\n\nfunction isResizeExpected(options) {\n  return options.width !== -1 || options.height !== -1;\n}\n/**\n * Resize image to `width`, `height` or `width x height`.\n *\n * When both a `width` and `height` are provided, the possible methods by which the image should **fit** these are:\n * - `cover`: (default) Preserving aspect ratio, attempt to ensure the image covers both provided dimensions by cropping/clipping to fit.\n * - `contain`: Preserving aspect ratio, contain within both provided dimensions using \"letterboxing\" where necessary.\n * - `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n * - `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n * - `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n *\n * Some of these values are based on the [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property.\n *\n * <img alt=\"Examples of various values for the fit property when resizing\" width=\"100%\" style=\"aspect-ratio: 998/243\" src=\"https://cdn.jsdelivr.net/gh/lovell/sharp@main/docs/image/api-resize-fit.png\">\n *\n * When using a **fit** of `cover` or `contain`, the default **position** is `centre`. Other options are:\n * - `sharp.position`: `top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`.\n * - `sharp.gravity`: `north`, `northeast`, `east`, `southeast`, `south`, `southwest`, `west`, `northwest`, `center` or `centre`.\n * - `sharp.strategy`: `cover` only, dynamically crop using either the `entropy` or `attention` strategy.\n *\n * Some of these values are based on the [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) CSS property.\n *\n * The experimental strategy-based approach resizes so one dimension is at its target length\n * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy.\n * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29).\n * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n *\n * Possible interpolation kernels are:\n * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation).\n * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).\n * - `mitchell`: Use a [Mitchell-Netravali spline](https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).\n * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`.\n * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default).\n *\n * Only one resize can occur per pipeline.\n * Previous calls to `resize` in the same pipeline will be ignored.\n *\n * @example\n * sharp(input)\n *   .resize({ width: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels wide, auto-scaled height\n *   });\n *\n * @example\n * sharp(input)\n *   .resize({ height: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels high, auto-scaled width\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 300, {\n *     kernel: sharp.kernel.nearest,\n *     fit: 'contain',\n *     position: 'right top',\n *     background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n *   })\n *   .toFile('output.png')\n *   .then(() => {\n *     // output.png is a 200 pixels wide and 300 pixels high image\n *     // containing a nearest-neighbour scaled version\n *     // contained within the north-east corner of a semi-transparent white canvas\n *   });\n *\n * @example\n * const transformer = sharp()\n *   .resize({\n *     width: 200,\n *     height: 200,\n *     fit: sharp.fit.cover,\n *     position: sharp.strategy.entropy\n *   });\n * // Read image data from readableStream\n * // Write 200px square auto-cropped image data to writableStream\n * readableStream\n *   .pipe(transformer)\n *   .pipe(writableStream);\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.inside,\n *     withoutEnlargement: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // no wider and no higher than 200 pixels\n *     // and no larger than the input image\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.outside,\n *     withoutReduction: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // of at least 200 pixels wide and 200 pixels high while maintaining aspect ratio\n *     // and no smaller than the input image\n *   });\n *\n * @example\n * const scaleByHalf = await sharp(input)\n *   .metadata()\n *   .then(({ width }) => sharp(input)\n *     .resize(Math.round(width * 0.5))\n *     .toBuffer()\n *   );\n *\n * @param {number} [width] - How many pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n * @param {number} [height] - How many pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n * @param {Object} [options]\n * @param {number} [options.width] - An alternative means of specifying `width`. If both are present this takes priority.\n * @param {number} [options.height] - An alternative means of specifying `height`. If both are present this takes priority.\n * @param {String} [options.fit='cover'] - How the image should be resized/cropped to fit the target dimension(s), one of `cover`, `contain`, `fill`, `inside` or `outside`.\n * @param {String} [options.position='centre'] - A position, gravity or strategy to use when `fit` is `cover` or `contain`.\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour when `fit` is `contain`, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @param {String} [options.kernel='lanczos3'] - The kernel to use for image reduction. Use the `fastShrinkOnLoad` option to control kernel vs shrink-on-load.\n * @param {Boolean} [options.withoutEnlargement=false] - Do not scale up if the width *or* height are already less than the target dimensions, equivalent to GraphicsMagick's `>` geometry option. This may result in output dimensions smaller than the target dimensions.\n * @param {Boolean} [options.withoutReduction=false] - Do not scale down if the width *or* height are already greater than the target dimensions, equivalent to GraphicsMagick's `<` geometry option. This may still result in a crop to reach the target dimensions.\n * @param {Boolean} [options.fastShrinkOnLoad=true] - Take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moirÃ© pattern or round-down of an auto-scaled dimension.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction resize(widthOrOptions, height, options) {\n  if (isResizeExpected(this.options)) {\n    this.options.debuglog('ignoring previous resize options');\n  }\n\n  if (is.defined(widthOrOptions)) {\n    if (is.object(widthOrOptions) && !is.defined(options)) {\n      options = widthOrOptions;\n    } else if (is.integer(widthOrOptions) && widthOrOptions > 0) {\n      this.options.width = widthOrOptions;\n    } else {\n      throw is.invalidParameterError('width', 'positive integer', widthOrOptions);\n    }\n  } else {\n    this.options.width = -1;\n  }\n\n  if (is.defined(height)) {\n    if (is.integer(height) && height > 0) {\n      this.options.height = height;\n    } else {\n      throw is.invalidParameterError('height', 'positive integer', height);\n    }\n  } else {\n    this.options.height = -1;\n  }\n\n  if (is.object(options)) {\n    // Width\n    if (is.defined(options.width)) {\n      if (is.integer(options.width) && options.width > 0) {\n        this.options.width = options.width;\n      } else {\n        throw is.invalidParameterError('width', 'positive integer', options.width);\n      }\n    } // Height\n\n\n    if (is.defined(options.height)) {\n      if (is.integer(options.height) && options.height > 0) {\n        this.options.height = options.height;\n      } else {\n        throw is.invalidParameterError('height', 'positive integer', options.height);\n      }\n    } // Fit\n\n\n    if (is.defined(options.fit)) {\n      const canvas = mapFitToCanvas[options.fit];\n\n      if (is.string(canvas)) {\n        this.options.canvas = canvas;\n      } else {\n        throw is.invalidParameterError('fit', 'valid fit', options.fit);\n      }\n    } // Position\n\n\n    if (is.defined(options.position)) {\n      const pos = is.integer(options.position) ? options.position : strategy[options.position] || position[options.position] || gravity[options.position];\n\n      if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {\n        this.options.position = pos;\n      } else {\n        throw is.invalidParameterError('position', 'valid position/gravity/strategy', options.position);\n      }\n    } // Background\n\n\n    this._setBackgroundColourOption('resizeBackground', options.background); // Kernel\n\n\n    if (is.defined(options.kernel)) {\n      if (is.string(kernel[options.kernel])) {\n        this.options.kernel = kernel[options.kernel];\n      } else {\n        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);\n      }\n    } // Without enlargement\n\n\n    if (is.defined(options.withoutEnlargement)) {\n      this._setBooleanOption('withoutEnlargement', options.withoutEnlargement);\n    } // Without reduction\n\n\n    if (is.defined(options.withoutReduction)) {\n      this._setBooleanOption('withoutReduction', options.withoutReduction);\n    } // Shrink on load\n\n\n    if (is.defined(options.fastShrinkOnLoad)) {\n      this._setBooleanOption('fastShrinkOnLoad', options.fastShrinkOnLoad);\n    }\n  }\n\n  if (isRotationExpected(this.options) && isResizeExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n\n  return this;\n}\n/**\n * Extend / pad / extrude one or more edges of the image with either\n * the provided background colour or pixels derived from the image.\n * This operation will always occur after resizing and extraction, if any.\n *\n * @example\n * // Resize to 140 pixels wide, then add 10 transparent pixels\n * // to the top, left and right edges and 20 to the bottom edge\n * sharp(input)\n *   .resize(140)\n *   .extend({\n *     top: 10,\n *     bottom: 20,\n *     left: 10,\n *     right: 10,\n *     background: { r: 0, g: 0, b: 0, alpha: 0 }\n *   })\n *   ...\n *\n* @example\n * // Add a row of 10 red pixels to the bottom\n * sharp(input)\n *   .extend({\n *     bottom: 10,\n *     background: 'red'\n *   })\n *   ...\n *\n * @example\n * // Extrude image by 8 pixels to the right, mirroring existing right hand edge\n * sharp(input)\n *   .extend({\n *     right: 8,\n *     background: 'mirror'\n *   })\n *   ...\n *\n * @param {(number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts\n * @param {number} [extend.top=0]\n * @param {number} [extend.left=0]\n * @param {number} [extend.bottom=0]\n * @param {number} [extend.right=0]\n * @param {String} [extend.extendWith='background'] - populate new pixels using this method, one of: background, copy, repeat, mirror.\n * @param {String|Object} [extend.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n*/\n\n\nfunction extend(extend) {\n  if (is.integer(extend) && extend > 0) {\n    this.options.extendTop = extend;\n    this.options.extendBottom = extend;\n    this.options.extendLeft = extend;\n    this.options.extendRight = extend;\n  } else if (is.object(extend)) {\n    if (is.defined(extend.top)) {\n      if (is.integer(extend.top) && extend.top >= 0) {\n        this.options.extendTop = extend.top;\n      } else {\n        throw is.invalidParameterError('top', 'positive integer', extend.top);\n      }\n    }\n\n    if (is.defined(extend.bottom)) {\n      if (is.integer(extend.bottom) && extend.bottom >= 0) {\n        this.options.extendBottom = extend.bottom;\n      } else {\n        throw is.invalidParameterError('bottom', 'positive integer', extend.bottom);\n      }\n    }\n\n    if (is.defined(extend.left)) {\n      if (is.integer(extend.left) && extend.left >= 0) {\n        this.options.extendLeft = extend.left;\n      } else {\n        throw is.invalidParameterError('left', 'positive integer', extend.left);\n      }\n    }\n\n    if (is.defined(extend.right)) {\n      if (is.integer(extend.right) && extend.right >= 0) {\n        this.options.extendRight = extend.right;\n      } else {\n        throw is.invalidParameterError('right', 'positive integer', extend.right);\n      }\n    }\n\n    this._setBackgroundColourOption('extendBackground', extend.background);\n\n    if (is.defined(extend.extendWith)) {\n      if (is.string(extendWith[extend.extendWith])) {\n        this.options.extendWith = extendWith[extend.extendWith];\n      } else {\n        throw is.invalidParameterError('extendWith', 'one of: background, copy, repeat, mirror', extend.extendWith);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('extend', 'integer or object', extend);\n  }\n\n  return this;\n}\n/**\n * Extract/crop a region of the image.\n *\n * - Use `extract` before `resize` for pre-resize extraction.\n * - Use `extract` after `resize` for post-resize extraction.\n * - Use `extract` before and after for both.\n *\n * @example\n * sharp(input)\n *   .extract({ left: left, top: top, width: width, height: height })\n *   .toFile(output, function(err) {\n *     // Extract a region of the input image, saving in the same format.\n *   });\n * @example\n * sharp(input)\n *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n *   .resize(width, height)\n *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n *   .toFile(output, function(err) {\n *     // Extract a region, resize, then extract from the resized image\n *   });\n *\n * @param {Object} options - describes the region to extract using integral pixel values\n * @param {number} options.left - zero-indexed offset from left edge\n * @param {number} options.top - zero-indexed offset from top edge\n * @param {number} options.width - width of region to extract\n * @param {number} options.height - height of region to extract\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction extract(options) {\n  const suffix = isResizeExpected(this.options) || this.options.widthPre !== -1 ? 'Post' : 'Pre';\n\n  if (this.options[`width${suffix}`] !== -1) {\n    this.options.debuglog('ignoring previous extract options');\n  }\n\n  ['left', 'top', 'width', 'height'].forEach(function (name) {\n    const value = options[name];\n\n    if (is.integer(value) && value >= 0) {\n      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;\n    } else {\n      throw is.invalidParameterError(name, 'integer', value);\n    }\n  }, this); // Ensure existing rotation occurs before pre-resize extraction\n\n  if (isRotationExpected(this.options) && !isResizeExpected(this.options)) {\n    if (this.options.widthPre === -1 || this.options.widthPost === -1) {\n      this.options.rotateBeforePreExtract = true;\n    }\n  }\n\n  return this;\n}\n/**\n * Trim pixels from all edges that contain values similar to the given background colour, which defaults to that of the top-left pixel.\n *\n * Images with an alpha channel will use the combined bounding box of alpha and non-alpha channels.\n *\n * If the result of this operation would trim an image to nothing then no change is made.\n *\n * The `info` response Object, obtained from callback of `.toFile()` or `.toBuffer()`,\n * will contain `trimOffsetLeft` and `trimOffsetTop` properties.\n *\n * @example\n * // Trim pixels with a colour similar to that of the top-left pixel.\n * sharp(input)\n *   .trim()\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n * @example\n * // Trim pixels with the exact same colour as that of the top-left pixel.\n * sharp(input)\n *   .trim(0)\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n * @example\n * // Trim only pixels with a similar colour to red.\n * sharp(input)\n *   .trim(\"#FF0000\")\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n * @example\n * // Trim all \"yellow-ish\" pixels, being more lenient with the higher threshold.\n * sharp(input)\n *   .trim({\n *     background: \"yellow\",\n *     threshold: 42,\n *   })\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n *\n * @param {string|number|Object} trim - the specific background colour to trim, the threshold for doing so or an Object with both.\n * @param {string|Object} [trim.background='top-left pixel'] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to that of the top-left pixel.\n * @param {number} [trim.threshold=10] - the allowed difference from the above colour, a positive number.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction trim(trim) {\n  if (!is.defined(trim)) {\n    this.options.trimThreshold = 10;\n  } else if (is.string(trim)) {\n    this._setBackgroundColourOption('trimBackground', trim);\n\n    this.options.trimThreshold = 10;\n  } else if (is.number(trim)) {\n    if (trim >= 0) {\n      this.options.trimThreshold = trim;\n    } else {\n      throw is.invalidParameterError('threshold', 'positive number', trim);\n    }\n  } else if (is.object(trim)) {\n    this._setBackgroundColourOption('trimBackground', trim.background);\n\n    if (!is.defined(trim.threshold)) {\n      this.options.trimThreshold = 10;\n    } else if (is.number(trim.threshold) && trim.threshold >= 0) {\n      this.options.trimThreshold = trim.threshold;\n    } else {\n      throw is.invalidParameterError('threshold', 'positive number', trim);\n    }\n  } else {\n    throw is.invalidParameterError('trim', 'string, number or object', trim);\n  }\n\n  if (isRotationExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n\n  return this;\n}\n/**\n * Decorate the Sharp prototype with resize-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    resize,\n    extend,\n    extract,\n    trim\n  }); // Class attributes\n\n  Sharp.gravity = gravity;\n  Sharp.strategy = strategy;\n  Sharp.kernel = kernel;\n  Sharp.fit = fit;\n  Sharp.position = position;\n};","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/node_modules/sharp/lib/resize.js"],"names":["is","require","gravity","center","centre","north","east","south","west","northeast","southeast","southwest","northwest","position","top","right","bottom","left","extendWith","background","copy","repeat","mirror","strategy","entropy","attention","kernel","nearest","cubic","mitchell","lanczos2","lanczos3","fit","contain","cover","fill","inside","outside","mapFitToCanvas","isRotationExpected","options","angle","useExifOrientation","rotationAngle","isResizeExpected","width","height","resize","widthOrOptions","debuglog","defined","object","integer","invalidParameterError","canvas","string","pos","inRange","_setBackgroundColourOption","withoutEnlargement","_setBooleanOption","withoutReduction","fastShrinkOnLoad","rotateBeforePreExtract","extend","extendTop","extendBottom","extendLeft","extendRight","extract","suffix","widthPre","forEach","name","value","widthPost","trim","trimThreshold","number","threshold","module","exports","Sharp","Object","assign","prototype"],"mappings":"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","sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst is = require('./is');\n\n/**\n * Weighting to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst gravity = {\n  center: 0,\n  centre: 0,\n  north: 1,\n  east: 2,\n  south: 3,\n  west: 4,\n  northeast: 5,\n  southeast: 6,\n  southwest: 7,\n  northwest: 8\n};\n\n/**\n * Position to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst position = {\n  top: 1,\n  right: 2,\n  bottom: 3,\n  left: 4,\n  'right top': 5,\n  'right bottom': 6,\n  'left bottom': 7,\n  'left top': 8\n};\n\n/**\n * How to extend the image.\n * @member\n * @private\n */\nconst extendWith = {\n  background: 'background',\n  copy: 'copy',\n  repeat: 'repeat',\n  mirror: 'mirror'\n};\n\n/**\n * Strategies for automagic cover behaviour.\n * @member\n * @private\n */\nconst strategy = {\n  entropy: 16,\n  attention: 17\n};\n\n/**\n * Reduction kernels.\n * @member\n * @private\n */\nconst kernel = {\n  nearest: 'nearest',\n  cubic: 'cubic',\n  mitchell: 'mitchell',\n  lanczos2: 'lanczos2',\n  lanczos3: 'lanczos3'\n};\n\n/**\n * Methods by which an image can be resized to fit the provided dimensions.\n * @member\n * @private\n */\nconst fit = {\n  contain: 'contain',\n  cover: 'cover',\n  fill: 'fill',\n  inside: 'inside',\n  outside: 'outside'\n};\n\n/**\n * Map external fit property to internal canvas property.\n * @member\n * @private\n */\nconst mapFitToCanvas = {\n  contain: 'embed',\n  cover: 'crop',\n  fill: 'ignore_aspect',\n  inside: 'max',\n  outside: 'min'\n};\n\n/**\n * @private\n */\nfunction isRotationExpected (options) {\n  return (options.angle % 360) !== 0 || options.useExifOrientation === true || options.rotationAngle !== 0;\n}\n\n/**\n * @private\n */\nfunction isResizeExpected (options) {\n  return options.width !== -1 || options.height !== -1;\n}\n\n/**\n * Resize image to `width`, `height` or `width x height`.\n *\n * When both a `width` and `height` are provided, the possible methods by which the image should **fit** these are:\n * - `cover`: (default) Preserving aspect ratio, attempt to ensure the image covers both provided dimensions by cropping/clipping to fit.\n * - `contain`: Preserving aspect ratio, contain within both provided dimensions using \"letterboxing\" where necessary.\n * - `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n * - `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n * - `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n *\n * Some of these values are based on the [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property.\n *\n * <img alt=\"Examples of various values for the fit property when resizing\" width=\"100%\" style=\"aspect-ratio: 998/243\" src=\"https://cdn.jsdelivr.net/gh/lovell/sharp@main/docs/image/api-resize-fit.png\">\n *\n * When using a **fit** of `cover` or `contain`, the default **position** is `centre`. Other options are:\n * - `sharp.position`: `top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`.\n * - `sharp.gravity`: `north`, `northeast`, `east`, `southeast`, `south`, `southwest`, `west`, `northwest`, `center` or `centre`.\n * - `sharp.strategy`: `cover` only, dynamically crop using either the `entropy` or `attention` strategy.\n *\n * Some of these values are based on the [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) CSS property.\n *\n * The experimental strategy-based approach resizes so one dimension is at its target length\n * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy.\n * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29).\n * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n *\n * Possible interpolation kernels are:\n * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation).\n * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).\n * - `mitchell`: Use a [Mitchell-Netravali spline](https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).\n * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`.\n * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default).\n *\n * Only one resize can occur per pipeline.\n * Previous calls to `resize` in the same pipeline will be ignored.\n *\n * @example\n * sharp(input)\n *   .resize({ width: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels wide, auto-scaled height\n *   });\n *\n * @example\n * sharp(input)\n *   .resize({ height: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels high, auto-scaled width\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 300, {\n *     kernel: sharp.kernel.nearest,\n *     fit: 'contain',\n *     position: 'right top',\n *     background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n *   })\n *   .toFile('output.png')\n *   .then(() => {\n *     // output.png is a 200 pixels wide and 300 pixels high image\n *     // containing a nearest-neighbour scaled version\n *     // contained within the north-east corner of a semi-transparent white canvas\n *   });\n *\n * @example\n * const transformer = sharp()\n *   .resize({\n *     width: 200,\n *     height: 200,\n *     fit: sharp.fit.cover,\n *     position: sharp.strategy.entropy\n *   });\n * // Read image data from readableStream\n * // Write 200px square auto-cropped image data to writableStream\n * readableStream\n *   .pipe(transformer)\n *   .pipe(writableStream);\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.inside,\n *     withoutEnlargement: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // no wider and no higher than 200 pixels\n *     // and no larger than the input image\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.outside,\n *     withoutReduction: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // of at least 200 pixels wide and 200 pixels high while maintaining aspect ratio\n *     // and no smaller than the input image\n *   });\n *\n * @example\n * const scaleByHalf = await sharp(input)\n *   .metadata()\n *   .then(({ width }) => sharp(input)\n *     .resize(Math.round(width * 0.5))\n *     .toBuffer()\n *   );\n *\n * @param {number} [width] - How many pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n * @param {number} [height] - How many pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n * @param {Object} [options]\n * @param {number} [options.width] - An alternative means of specifying `width`. If both are present this takes priority.\n * @param {number} [options.height] - An alternative means of specifying `height`. If both are present this takes priority.\n * @param {String} [options.fit='cover'] - How the image should be resized/cropped to fit the target dimension(s), one of `cover`, `contain`, `fill`, `inside` or `outside`.\n * @param {String} [options.position='centre'] - A position, gravity or strategy to use when `fit` is `cover` or `contain`.\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour when `fit` is `contain`, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @param {String} [options.kernel='lanczos3'] - The kernel to use for image reduction. Use the `fastShrinkOnLoad` option to control kernel vs shrink-on-load.\n * @param {Boolean} [options.withoutEnlargement=false] - Do not scale up if the width *or* height are already less than the target dimensions, equivalent to GraphicsMagick's `>` geometry option. This may result in output dimensions smaller than the target dimensions.\n * @param {Boolean} [options.withoutReduction=false] - Do not scale down if the width *or* height are already greater than the target dimensions, equivalent to GraphicsMagick's `<` geometry option. This may still result in a crop to reach the target dimensions.\n * @param {Boolean} [options.fastShrinkOnLoad=true] - Take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moirÃ© pattern or round-down of an auto-scaled dimension.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction resize (widthOrOptions, height, options) {\n  if (isResizeExpected(this.options)) {\n    this.options.debuglog('ignoring previous resize options');\n  }\n  if (is.defined(widthOrOptions)) {\n    if (is.object(widthOrOptions) && !is.defined(options)) {\n      options = widthOrOptions;\n    } else if (is.integer(widthOrOptions) && widthOrOptions > 0) {\n      this.options.width = widthOrOptions;\n    } else {\n      throw is.invalidParameterError('width', 'positive integer', widthOrOptions);\n    }\n  } else {\n    this.options.width = -1;\n  }\n  if (is.defined(height)) {\n    if (is.integer(height) && height > 0) {\n      this.options.height = height;\n    } else {\n      throw is.invalidParameterError('height', 'positive integer', height);\n    }\n  } else {\n    this.options.height = -1;\n  }\n  if (is.object(options)) {\n    // Width\n    if (is.defined(options.width)) {\n      if (is.integer(options.width) && options.width > 0) {\n        this.options.width = options.width;\n      } else {\n        throw is.invalidParameterError('width', 'positive integer', options.width);\n      }\n    }\n    // Height\n    if (is.defined(options.height)) {\n      if (is.integer(options.height) && options.height > 0) {\n        this.options.height = options.height;\n      } else {\n        throw is.invalidParameterError('height', 'positive integer', options.height);\n      }\n    }\n    // Fit\n    if (is.defined(options.fit)) {\n      const canvas = mapFitToCanvas[options.fit];\n      if (is.string(canvas)) {\n        this.options.canvas = canvas;\n      } else {\n        throw is.invalidParameterError('fit', 'valid fit', options.fit);\n      }\n    }\n    // Position\n    if (is.defined(options.position)) {\n      const pos = is.integer(options.position)\n        ? options.position\n        : strategy[options.position] || position[options.position] || gravity[options.position];\n      if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {\n        this.options.position = pos;\n      } else {\n        throw is.invalidParameterError('position', 'valid position/gravity/strategy', options.position);\n      }\n    }\n    // Background\n    this._setBackgroundColourOption('resizeBackground', options.background);\n    // Kernel\n    if (is.defined(options.kernel)) {\n      if (is.string(kernel[options.kernel])) {\n        this.options.kernel = kernel[options.kernel];\n      } else {\n        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);\n      }\n    }\n    // Without enlargement\n    if (is.defined(options.withoutEnlargement)) {\n      this._setBooleanOption('withoutEnlargement', options.withoutEnlargement);\n    }\n    // Without reduction\n    if (is.defined(options.withoutReduction)) {\n      this._setBooleanOption('withoutReduction', options.withoutReduction);\n    }\n    // Shrink on load\n    if (is.defined(options.fastShrinkOnLoad)) {\n      this._setBooleanOption('fastShrinkOnLoad', options.fastShrinkOnLoad);\n    }\n  }\n  if (isRotationExpected(this.options) && isResizeExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Extend / pad / extrude one or more edges of the image with either\n * the provided background colour or pixels derived from the image.\n * This operation will always occur after resizing and extraction, if any.\n *\n * @example\n * // Resize to 140 pixels wide, then add 10 transparent pixels\n * // to the top, left and right edges and 20 to the bottom edge\n * sharp(input)\n *   .resize(140)\n *   .extend({\n *     top: 10,\n *     bottom: 20,\n *     left: 10,\n *     right: 10,\n *     background: { r: 0, g: 0, b: 0, alpha: 0 }\n *   })\n *   ...\n *\n* @example\n * // Add a row of 10 red pixels to the bottom\n * sharp(input)\n *   .extend({\n *     bottom: 10,\n *     background: 'red'\n *   })\n *   ...\n *\n * @example\n * // Extrude image by 8 pixels to the right, mirroring existing right hand edge\n * sharp(input)\n *   .extend({\n *     right: 8,\n *     background: 'mirror'\n *   })\n *   ...\n *\n * @param {(number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts\n * @param {number} [extend.top=0]\n * @param {number} [extend.left=0]\n * @param {number} [extend.bottom=0]\n * @param {number} [extend.right=0]\n * @param {String} [extend.extendWith='background'] - populate new pixels using this method, one of: background, copy, repeat, mirror.\n * @param {String|Object} [extend.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n*/\nfunction extend (extend) {\n  if (is.integer(extend) && extend > 0) {\n    this.options.extendTop = extend;\n    this.options.extendBottom = extend;\n    this.options.extendLeft = extend;\n    this.options.extendRight = extend;\n  } else if (is.object(extend)) {\n    if (is.defined(extend.top)) {\n      if (is.integer(extend.top) && extend.top >= 0) {\n        this.options.extendTop = extend.top;\n      } else {\n        throw is.invalidParameterError('top', 'positive integer', extend.top);\n      }\n    }\n    if (is.defined(extend.bottom)) {\n      if (is.integer(extend.bottom) && extend.bottom >= 0) {\n        this.options.extendBottom = extend.bottom;\n      } else {\n        throw is.invalidParameterError('bottom', 'positive integer', extend.bottom);\n      }\n    }\n    if (is.defined(extend.left)) {\n      if (is.integer(extend.left) && extend.left >= 0) {\n        this.options.extendLeft = extend.left;\n      } else {\n        throw is.invalidParameterError('left', 'positive integer', extend.left);\n      }\n    }\n    if (is.defined(extend.right)) {\n      if (is.integer(extend.right) && extend.right >= 0) {\n        this.options.extendRight = extend.right;\n      } else {\n        throw is.invalidParameterError('right', 'positive integer', extend.right);\n      }\n    }\n    this._setBackgroundColourOption('extendBackground', extend.background);\n    if (is.defined(extend.extendWith)) {\n      if (is.string(extendWith[extend.extendWith])) {\n        this.options.extendWith = extendWith[extend.extendWith];\n      } else {\n        throw is.invalidParameterError('extendWith', 'one of: background, copy, repeat, mirror', extend.extendWith);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('extend', 'integer or object', extend);\n  }\n  return this;\n}\n\n/**\n * Extract/crop a region of the image.\n *\n * - Use `extract` before `resize` for pre-resize extraction.\n * - Use `extract` after `resize` for post-resize extraction.\n * - Use `extract` before and after for both.\n *\n * @example\n * sharp(input)\n *   .extract({ left: left, top: top, width: width, height: height })\n *   .toFile(output, function(err) {\n *     // Extract a region of the input image, saving in the same format.\n *   });\n * @example\n * sharp(input)\n *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n *   .resize(width, height)\n *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n *   .toFile(output, function(err) {\n *     // Extract a region, resize, then extract from the resized image\n *   });\n *\n * @param {Object} options - describes the region to extract using integral pixel values\n * @param {number} options.left - zero-indexed offset from left edge\n * @param {number} options.top - zero-indexed offset from top edge\n * @param {number} options.width - width of region to extract\n * @param {number} options.height - height of region to extract\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction extract (options) {\n  const suffix = isResizeExpected(this.options) || this.options.widthPre !== -1 ? 'Post' : 'Pre';\n  if (this.options[`width${suffix}`] !== -1) {\n    this.options.debuglog('ignoring previous extract options');\n  }\n  ['left', 'top', 'width', 'height'].forEach(function (name) {\n    const value = options[name];\n    if (is.integer(value) && value >= 0) {\n      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;\n    } else {\n      throw is.invalidParameterError(name, 'integer', value);\n    }\n  }, this);\n  // Ensure existing rotation occurs before pre-resize extraction\n  if (isRotationExpected(this.options) && !isResizeExpected(this.options)) {\n    if (this.options.widthPre === -1 || this.options.widthPost === -1) {\n      this.options.rotateBeforePreExtract = true;\n    }\n  }\n  return this;\n}\n\n/**\n * Trim pixels from all edges that contain values similar to the given background colour, which defaults to that of the top-left pixel.\n *\n * Images with an alpha channel will use the combined bounding box of alpha and non-alpha channels.\n *\n * If the result of this operation would trim an image to nothing then no change is made.\n *\n * The `info` response Object, obtained from callback of `.toFile()` or `.toBuffer()`,\n * will contain `trimOffsetLeft` and `trimOffsetTop` properties.\n *\n * @example\n * // Trim pixels with a colour similar to that of the top-left pixel.\n * sharp(input)\n *   .trim()\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n * @example\n * // Trim pixels with the exact same colour as that of the top-left pixel.\n * sharp(input)\n *   .trim(0)\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n * @example\n * // Trim only pixels with a similar colour to red.\n * sharp(input)\n *   .trim(\"#FF0000\")\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n * @example\n * // Trim all \"yellow-ish\" pixels, being more lenient with the higher threshold.\n * sharp(input)\n *   .trim({\n *     background: \"yellow\",\n *     threshold: 42,\n *   })\n *   .toFile(output, function(err, info) {\n *     ...\n *   });\n *\n * @param {string|number|Object} trim - the specific background colour to trim, the threshold for doing so or an Object with both.\n * @param {string|Object} [trim.background='top-left pixel'] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to that of the top-left pixel.\n * @param {number} [trim.threshold=10] - the allowed difference from the above colour, a positive number.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction trim (trim) {\n  if (!is.defined(trim)) {\n    this.options.trimThreshold = 10;\n  } else if (is.string(trim)) {\n    this._setBackgroundColourOption('trimBackground', trim);\n    this.options.trimThreshold = 10;\n  } else if (is.number(trim)) {\n    if (trim >= 0) {\n      this.options.trimThreshold = trim;\n    } else {\n      throw is.invalidParameterError('threshold', 'positive number', trim);\n    }\n  } else if (is.object(trim)) {\n    this._setBackgroundColourOption('trimBackground', trim.background);\n    if (!is.defined(trim.threshold)) {\n      this.options.trimThreshold = 10;\n    } else if (is.number(trim.threshold) && trim.threshold >= 0) {\n      this.options.trimThreshold = trim.threshold;\n    } else {\n      throw is.invalidParameterError('threshold', 'positive number', trim);\n    }\n  } else {\n    throw is.invalidParameterError('trim', 'string, number or object', trim);\n  }\n  if (isRotationExpected(this.options)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with resize-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    resize,\n    extend,\n    extract,\n    trim\n  });\n  // Class attributes\n  Sharp.gravity = gravity;\n  Sharp.strategy = strategy;\n  Sharp.kernel = kernel;\n  Sharp.fit = fit;\n  Sharp.position = position;\n};\n"]},"metadata":{},"sourceType":"script"}