{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef } from 'react';\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid';\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport Jimp from 'jimp';\nimport Blowfish from 'blowfish';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n  const fileInputRef = useRef(null);\n\n  const encodeMessage = async (image, message, delimiter) => {\n    const binaryMessage = message.split('').map(char => char.charCodeAt(0).toString(2).padStart(8, '0')).join('');\n    const binaryMessageWithDelimiter = binaryMessage + delimiter;\n    const jimpImage = await Jimp.read(image);\n    const width = jimpImage.bitmap.width;\n    const height = jimpImage.bitmap.height;\n    let binaryMessageIndex = 0;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const rgba = Jimp.intToRGBA(jimpImage.getPixelColor(x, y));\n        let binaryR = rgba.r.toString(2).padStart(8, '0');\n        let binaryG = rgba.g.toString(2).padStart(8, '0');\n        let binaryB = rgba.b.toString(2).padStart(8, '0');\n\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\n          binaryR = binaryR.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\n        }\n\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\n          binaryG = binaryG.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\n        }\n\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\n          binaryB = binaryB.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\n        }\n\n        const modifiedColor = Jimp.rgbaToInt(parseInt(binaryR, 2), parseInt(binaryG, 2), parseInt(binaryB, 2), rgba.a);\n        jimpImage.setPixelColor(modifiedColor, x, y);\n      }\n    }\n\n    const encodedImagePath = 'output.png';\n    await jimpImage.writeAsync(encodedImagePath);\n    console.log('Message encoded successfully. Encoded image saved at:', encodedImagePath);\n  };\n\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = async e => {\n      const image = e.target.result;\n      const message = 'Your secret message';\n      const delimiter = '00000000'; // Example delimiter\n\n      await encodeMessage(image, message, delimiter);\n    };\n\n    reader.readAsDataURL(file);\n    handleSend();\n  };\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleFileChange,\n        ref: fileInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"v6Iy40eNFlvcewAmzSdPrGkWyeI=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","useRef","at","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Jimp","Blowfish","Input","text","setText","img","setImg","currentUser","data","fileInputRef","encodeMessage","image","message","delimiter","binaryMessage","split","map","char","charCodeAt","toString","padStart","join","binaryMessageWithDelimiter","jimpImage","read","width","bitmap","height","binaryMessageIndex","y","x","rgba","intToRGBA","getPixelColor","binaryR","r","binaryG","g","binaryB","b","length","slice","modifiedColor","rgbaToInt","parseInt","a","setPixelColor","encodedImagePath","writeAsync","console","log","handleFileChange","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","handleSend","storageRef","uploadTask","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef } from 'react'\r\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nimport Jimp from 'jimp';\r\nimport Blowfish from 'blowfish';\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n\r\n  const fileInputRef = useRef(null);\r\n\r\n  const encodeMessage = async (image, message, delimiter) => {\r\n    const binaryMessage = message\r\n      .split('')\r\n      .map((char) => char.charCodeAt(0).toString(2).padStart(8, '0'))\r\n      .join('');\r\n\r\n    const binaryMessageWithDelimiter = binaryMessage + delimiter;\r\n\r\n    const jimpImage = await Jimp.read(image);\r\n    const width = jimpImage.bitmap.width;\r\n    const height = jimpImage.bitmap.height;\r\n\r\n    let binaryMessageIndex = 0;\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const rgba = Jimp.intToRGBA(jimpImage.getPixelColor(x, y));\r\n        let binaryR = rgba.r.toString(2).padStart(8, '0');\r\n        let binaryG = rgba.g.toString(2).padStart(8, '0');\r\n        let binaryB = rgba.b.toString(2).padStart(8, '0');\r\n\r\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\r\n          binaryR = binaryR.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\r\n        }\r\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\r\n          binaryG = binaryG.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\r\n        }\r\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\r\n          binaryB = binaryB.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\r\n        }\r\n\r\n        const modifiedColor = Jimp.rgbaToInt(\r\n          parseInt(binaryR, 2),\r\n          parseInt(binaryG, 2),\r\n          parseInt(binaryB, 2),\r\n          rgba.a\r\n        );\r\n        jimpImage.setPixelColor(modifiedColor, x, y);\r\n      }\r\n    }\r\n\r\n    const encodedImagePath = 'output.png';\r\n    await jimpImage.writeAsync(encodedImagePath);\r\n    console.log('Message encoded successfully. Encoded image saved at:', encodedImagePath);\r\n  };\r\n\r\n  const handleFileChange = async (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (e) => {\r\n      const image = e.target.result;\r\n      const message = 'Your secret message';\r\n      const delimiter = '00000000'; // Example delimiter\r\n\r\n      await encodeMessage(image, message, delimiter);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n    handleSend();\r\n  };\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n  \r\n        const uploadTask = uploadBytesResumable(storageRef, img);\r\n  \r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        {/* <img src={at} alt=\"\" /> */}\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleFileChange} ref={fileInputRef}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}