{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst spawnSync = require('child_process').spawnSync;\n\nconst semverCoerce = require('semver/functions/coerce');\n\nconst semverGreaterThanOrEqualTo = require('semver/functions/gte');\n\nconst platform = require('./platform');\n\nconst {\n  config\n} = require('../package.json');\n\nconst env = process.env;\nconst minimumLibvipsVersionLabelled = env.npm_package_config_libvips ||\n/* istanbul ignore next */\nconfig.libvips;\nconst minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\nconst vendorPath = path.join(__dirname, '..', 'vendor', minimumLibvipsVersion, platform());\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath, {\n      recursive: true\n    });\n  } catch (err) {\n    /* istanbul ignore next */\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n};\n\nconst cachePath = function () {\n  const npmCachePath = env.npm_config_cache || (\n  /* istanbul ignore next */\n  env.APPDATA ? path.join(env.APPDATA, 'npm-cache') : path.join(os.homedir(), '.npm'));\n  mkdirSync(npmCachePath);\n  const libvipsCachePath = path.join(npmCachePath, '_libvips');\n  mkdirSync(libvipsCachePath);\n  return libvipsCachePath;\n};\n\nconst integrity = function (platformAndArch) {\n  return env[`npm_package_config_integrity_${platformAndArch.replace('-', '_')}`] || config.integrity[platformAndArch];\n};\n\nconst log = function (item) {\n  if (item instanceof Error) {\n    console.error(`sharp: Installation error: ${item.message}`);\n  } else {\n    console.log(`sharp: ${item}`);\n  }\n};\n\nconst isRosetta = function () {\n  /* istanbul ignore next */\n  if (process.platform === 'darwin' && process.arch === 'x64') {\n    const translated = spawnSync('sysctl sysctl.proc_translated', spawnSyncOptions).stdout;\n    return (translated || '').trim() === 'sysctl.proc_translated: 1';\n  }\n\n  return false;\n};\n\nconst globalLibvipsVersion = function () {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync('pkg-config --modversion vips-cpp', { ...spawnSyncOptions,\n      env: { ...env,\n        PKG_CONFIG_PATH: pkgConfigPath()\n      }\n    }).stdout;\n    /* istanbul ignore next */\n\n    return (globalLibvipsVersion || '').trim();\n  } else {\n    return '';\n  }\n};\n\nconst hasVendoredLibvips = function () {\n  return fs.existsSync(vendorPath);\n};\n/* istanbul ignore next */\n\n\nconst removeVendoredLibvips = function () {\n  fs.rmSync(vendorPath, {\n    recursive: true,\n    maxRetries: 3,\n    force: true\n  });\n};\n/* istanbul ignore next */\n\n\nconst pkgConfigPath = function () {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync('which brew >/dev/null 2>&1 && brew environment --plain | grep PKG_CONFIG_LIBDIR | cut -d\" \" -f2', spawnSyncOptions).stdout || '';\n    return [brewPkgConfigPath.trim(), env.PKG_CONFIG_PATH, '/usr/local/lib/pkgconfig', '/usr/lib/pkgconfig', '/usr/local/libdata/pkgconfig', '/usr/libdata/pkgconfig'].filter(Boolean).join(':');\n  } else {\n    return '';\n  }\n};\n\nconst useGlobalLibvips = function () {\n  if (Boolean(env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return false;\n  }\n  /* istanbul ignore next */\n\n\n  if (isRosetta()) {\n    log('Detected Rosetta, skipping search for globally-installed libvips');\n    return false;\n  }\n\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion &&\n  /* istanbul ignore next */\n  semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion,\n  minimumLibvipsVersionLabelled,\n  cachePath,\n  integrity,\n  log,\n  globalLibvipsVersion,\n  hasVendoredLibvips,\n  removeVendoredLibvips,\n  pkgConfigPath,\n  useGlobalLibvips,\n  mkdirSync\n};","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/node_modules/sharp/lib/libvips.js"],"names":["fs","require","os","path","spawnSync","semverCoerce","semverGreaterThanOrEqualTo","platform","config","env","process","minimumLibvipsVersionLabelled","npm_package_config_libvips","libvips","minimumLibvipsVersion","version","spawnSyncOptions","encoding","shell","vendorPath","join","__dirname","mkdirSync","dirPath","recursive","err","code","cachePath","npmCachePath","npm_config_cache","APPDATA","homedir","libvipsCachePath","integrity","platformAndArch","replace","log","item","Error","console","error","message","isRosetta","arch","translated","stdout","trim","globalLibvipsVersion","PKG_CONFIG_PATH","pkgConfigPath","hasVendoredLibvips","existsSync","removeVendoredLibvips","rmSync","maxRetries","force","brewPkgConfigPath","filter","Boolean","useGlobalLibvips","SHARP_IGNORE_GLOBAL_LIBVIPS","globalVipsVersion","module","exports"],"mappings":"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","sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst spawnSync = require('child_process').spawnSync;\nconst semverCoerce = require('semver/functions/coerce');\nconst semverGreaterThanOrEqualTo = require('semver/functions/gte');\n\nconst platform = require('./platform');\nconst { config } = require('../package.json');\n\nconst env = process.env;\nconst minimumLibvipsVersionLabelled = env.npm_package_config_libvips || /* istanbul ignore next */\n  config.libvips;\nconst minimumLibvipsVersion = semverCoerce(minimumLibvipsVersionLabelled).version;\n\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\n\nconst vendorPath = path.join(__dirname, '..', 'vendor', minimumLibvipsVersion, platform());\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath, { recursive: true });\n  } catch (err) {\n    /* istanbul ignore next */\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n};\n\nconst cachePath = function () {\n  const npmCachePath = env.npm_config_cache || /* istanbul ignore next */\n    (env.APPDATA ? path.join(env.APPDATA, 'npm-cache') : path.join(os.homedir(), '.npm'));\n  mkdirSync(npmCachePath);\n  const libvipsCachePath = path.join(npmCachePath, '_libvips');\n  mkdirSync(libvipsCachePath);\n  return libvipsCachePath;\n};\n\nconst integrity = function (platformAndArch) {\n  return env[`npm_package_config_integrity_${platformAndArch.replace('-', '_')}`] || config.integrity[platformAndArch];\n};\n\nconst log = function (item) {\n  if (item instanceof Error) {\n    console.error(`sharp: Installation error: ${item.message}`);\n  } else {\n    console.log(`sharp: ${item}`);\n  }\n};\n\nconst isRosetta = function () {\n  /* istanbul ignore next */\n  if (process.platform === 'darwin' && process.arch === 'x64') {\n    const translated = spawnSync('sysctl sysctl.proc_translated', spawnSyncOptions).stdout;\n    return (translated || '').trim() === 'sysctl.proc_translated: 1';\n  }\n  return false;\n};\n\nconst globalLibvipsVersion = function () {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync('pkg-config --modversion vips-cpp', {\n      ...spawnSyncOptions,\n      env: {\n        ...env,\n        PKG_CONFIG_PATH: pkgConfigPath()\n      }\n    }).stdout;\n    /* istanbul ignore next */\n    return (globalLibvipsVersion || '').trim();\n  } else {\n    return '';\n  }\n};\n\nconst hasVendoredLibvips = function () {\n  return fs.existsSync(vendorPath);\n};\n\n/* istanbul ignore next */\nconst removeVendoredLibvips = function () {\n  fs.rmSync(vendorPath, { recursive: true, maxRetries: 3, force: true });\n};\n\n/* istanbul ignore next */\nconst pkgConfigPath = function () {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync(\n      'which brew >/dev/null 2>&1 && brew environment --plain | grep PKG_CONFIG_LIBDIR | cut -d\" \" -f2',\n      spawnSyncOptions\n    ).stdout || '';\n    return [\n      brewPkgConfigPath.trim(),\n      env.PKG_CONFIG_PATH,\n      '/usr/local/lib/pkgconfig',\n      '/usr/lib/pkgconfig',\n      '/usr/local/libdata/pkgconfig',\n      '/usr/libdata/pkgconfig'\n    ].filter(Boolean).join(':');\n  } else {\n    return '';\n  }\n};\n\nconst useGlobalLibvips = function () {\n  if (Boolean(env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return false;\n  }\n  /* istanbul ignore next */\n  if (isRosetta()) {\n    log('Detected Rosetta, skipping search for globally-installed libvips');\n    return false;\n  }\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion && /* istanbul ignore next */\n    semverGreaterThanOrEqualTo(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion,\n  minimumLibvipsVersionLabelled,\n  cachePath,\n  integrity,\n  log,\n  globalLibvipsVersion,\n  hasVendoredLibvips,\n  removeVendoredLibvips,\n  pkgConfigPath,\n  useGlobalLibvips,\n  mkdirSync\n};\n"]},"metadata":{},"sourceType":"script"}