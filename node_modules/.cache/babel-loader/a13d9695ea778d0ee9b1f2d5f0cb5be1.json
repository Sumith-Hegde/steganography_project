{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef } from 'react';\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid';\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport Jimp from 'jimp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n  const [image, setImage] = useState(null);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (image) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const img1 = new Image();\n\n      img1.onload = () => {\n        ctx.drawImage(img1, 0, 0);\n        manipulateImage(ctx);\n      };\n\n      img1.src = URL.createObjectURL(image);\n    }\n  }, [image]);\n\n  const manipulateImage = ctx => {\n    // Get the image data\n    const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height); // Manipulate the pixel values\n\n    const data = imageData.data;\n    console.log(data);\n\n    for (let i = 0; i < data.length; i += 4) {\n      // Manipulate the RGBA values of each pixel\n      // Example: Invert the colors\n      data[i] = 255 - data[i]; // Red\n\n      data[i + 1] = 255 - data[i + 1]; // Green\n\n      data[i + 2] = 255 - data[i + 2]; // Blue\n    } // Put the modified image data back onto the canvas\n    // ctx.putImageData(imageData, 0, 0);\n\n  };\n\n  const handleChange = e => {\n    setImage(e.target.files[0]);\n  };\n\n  const handleSend = async () => {\n    if (img) {\n      // console.log(fileData)\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img); // console.log((await createImageBitmap(img)))\n\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"nLqMm+3IE8JJiVmyVSWgTH+D8gU=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","useRef","at","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Jimp","Input","text","setText","img","setImg","currentUser","data","image","setImage","canvasRef","useEffect","canvas","current","ctx","getContext","img1","Image","onload","drawImage","manipulateImage","src","URL","createObjectURL","imageData","getImageData","width","height","console","log","i","length","handleChange","e","target","files","handleSend","storageRef","uploadTask","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState,useRef } from 'react'\r\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\nimport Jimp from 'jimp';  \r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n  const [image, setImage] = useState(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (image) {\r\n      const canvas = canvasRef.current;\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      const img1 = new Image();\r\n      img1.onload = () => {\r\n        ctx.drawImage(img1, 0, 0);\r\n        manipulateImage(ctx);\r\n      };\r\n      img1.src = URL.createObjectURL(image);\r\n    }\r\n  }, [image]);\r\n\r\n  const manipulateImage = (ctx) => {\r\n    // Get the image data\r\n    const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    // Manipulate the pixel values\r\n    const data = imageData.data;\r\n    console.log(data)\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      // Manipulate the RGBA values of each pixel\r\n      // Example: Invert the colors\r\n      data[i] = 255 - data[i]; // Red\r\n      data[i + 1] = 255 - data[i + 1]; // Green\r\n      data[i + 2] = 255 - data[i + 2]; // Blue\r\n    }\r\n\r\n    // Put the modified image data back onto the canvas\r\n    // ctx.putImageData(imageData, 0, 0);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setImage(e.target.files[0]);\r\n  };\r\n      \r\n      \r\n      const handleSend=async()=>{\r\n        if(img){\r\n          // console.log(fileData)\r\n      const storageRef = ref(storage, uuid());\r\n      const uploadTask = uploadBytesResumable(storageRef, img);\r\n      // console.log((await createImageBitmap(img)))\r\n      \r\n      uploadTask.on(\r\n        (error) => {\r\n          // setErr(true);\r\n        },\r\n        () => {\r\n          getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n            await updateDoc(doc(db, \"chats\", data.chatId), {\r\n              messages: arrayUnion({\r\n                id: uuid(),\r\n                text,\r\n                senderId: currentUser.uid,\r\n                date: Timestamp.now(),\r\n                img: downloadURL,\r\n              }),\r\n            });\r\n          });\r\n        }\r\n        );\r\n      } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        {/* <img src={at} alt=\"\" /> */}\r\n        <input type='file' style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}