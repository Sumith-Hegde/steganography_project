{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n'use strict';\n\nconst color = require('color');\n\nconst is = require('./is');\n/**\n * Rotate the output image by either an explicit angle\n * or auto-orient based on the EXIF `Orientation` tag.\n *\n * If an angle is provided, it is converted to a valid positive degree rotation.\n * For example, `-450` will produce a 270deg rotation.\n *\n * When rotating by an angle other than a multiple of 90,\n * the background colour can be provided with the `background` option.\n *\n * If no angle is provided, it is determined from the EXIF data.\n * Mirroring is supported and may infer the use of a flip operation.\n *\n * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * Only one rotation can occur per pipeline.\n * Previous calls to `rotate` in the same pipeline will be ignored.\n *\n * Method order is important when rotating, resizing and/or extracting regions,\n * for example `.rotate(x).extract(y)` will produce a different result to `.extract(y).rotate(x)`.\n *\n * @example\n * const pipeline = sharp()\n *   .rotate()\n *   .resize(null, 200)\n *   .toBuffer(function (err, outputBuffer, info) {\n *     // outputBuffer contains 200px high JPEG image data,\n *     // auto-rotated using EXIF Orientation tag\n *     // info.width and info.height contain the dimensions of the resized image\n *   });\n * readableStream.pipe(pipeline);\n *\n * @example\n * const rotateThenResize = await sharp(input)\n *   .rotate(90)\n *   .resize({ width: 16, height: 8, fit: 'fill' })\n *   .toBuffer();\n * const resizeThenRotate = await sharp(input)\n *   .resize({ width: 16, height: 8, fit: 'fill' })\n *   .rotate(90)\n *   .toBuffer();\n *\n * @param {number} [angle=auto] angle of rotation.\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {string|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction rotate(angle, options) {\n  if (this.options.useExifOrientation || this.options.angle || this.options.rotationAngle) {\n    this.options.debuglog('ignoring previous rotate options');\n  }\n\n  if (!is.defined(angle)) {\n    this.options.useExifOrientation = true;\n  } else if (is.integer(angle) && !(angle % 90)) {\n    this.options.angle = angle;\n  } else if (is.number(angle)) {\n    this.options.rotationAngle = angle;\n\n    if (is.object(options) && options.background) {\n      const backgroundColour = color(options.background);\n      this.options.rotationBackground = [backgroundColour.red(), backgroundColour.green(), backgroundColour.blue(), Math.round(backgroundColour.alpha() * 255)];\n    }\n  } else {\n    throw is.invalidParameterError('angle', 'numeric', angle);\n  }\n\n  return this;\n}\n/**\n * Flip the image about the vertical Y axis. This always occurs before rotation, if any.\n * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * @example\n * const output = await sharp(input).flip().toBuffer();\n *\n * @param {Boolean} [flip=true]\n * @returns {Sharp}\n */\n\n\nfunction flip(flip) {\n  this.options.flip = is.bool(flip) ? flip : true;\n  return this;\n}\n/**\n * Flop the image about the horizontal X axis. This always occurs before rotation, if any.\n * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * @example\n * const output = await sharp(input).flop().toBuffer();\n *\n * @param {Boolean} [flop=true]\n * @returns {Sharp}\n */\n\n\nfunction flop(flop) {\n  this.options.flop = is.bool(flop) ? flop : true;\n  return this;\n}\n/**\n * Perform an affine transform on an image. This operation will always occur after resizing, extraction and rotation, if any.\n *\n * You must provide an array of length 4 or a 2x2 affine transformation matrix.\n * By default, new pixels are filled with a black background. You can provide a background color with the `background` option.\n * A particular interpolator may also be specified. Set the `interpolator` option to an attribute of the `sharp.interpolators` Object e.g. `sharp.interpolators.nohalo`.\n *\n * In the case of a 2x2 matrix, the transform is:\n * - X = `matrix[0, 0]` \\* (x + `idx`) + `matrix[0, 1]` \\* (y + `idy`) + `odx`\n * - Y = `matrix[1, 0]` \\* (x + `idx`) + `matrix[1, 1]` \\* (y + `idy`) + `ody`\n *\n * where:\n * - x and y are the coordinates in input image.\n * - X and Y are the coordinates in output image.\n * - (0,0) is the upper left corner.\n *\n * @since 0.27.0\n *\n * @example\n * const pipeline = sharp()\n *   .affine([[1, 0.3], [0.1, 0.7]], {\n *      background: 'white',\n *      interpolator: sharp.interpolators.nohalo\n *   })\n *   .toBuffer((err, outputBuffer, info) => {\n *      // outputBuffer contains the transformed image\n *      // info.width and info.height contain the new dimensions\n *   });\n *\n * inputStream\n *   .pipe(pipeline);\n *\n * @param {Array<Array<number>>|Array<number>} matrix - affine transformation matrix\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {String|Object} [options.background=\"#000000\"] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @param {Number} [options.idx=0] - input horizontal offset\n * @param {Number} [options.idy=0] - input vertical offset\n * @param {Number} [options.odx=0] - output horizontal offset\n * @param {Number} [options.ody=0] - output vertical offset\n * @param {String} [options.interpolator=sharp.interpolators.bicubic] - interpolator\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction affine(matrix, options) {\n  const flatMatrix = [].concat(...matrix);\n\n  if (flatMatrix.length === 4 && flatMatrix.every(is.number)) {\n    this.options.affineMatrix = flatMatrix;\n  } else {\n    throw is.invalidParameterError('matrix', '1x4 or 2x2 array', matrix);\n  }\n\n  if (is.defined(options)) {\n    if (is.object(options)) {\n      this._setBackgroundColourOption('affineBackground', options.background);\n\n      if (is.defined(options.idx)) {\n        if (is.number(options.idx)) {\n          this.options.affineIdx = options.idx;\n        } else {\n          throw is.invalidParameterError('options.idx', 'number', options.idx);\n        }\n      }\n\n      if (is.defined(options.idy)) {\n        if (is.number(options.idy)) {\n          this.options.affineIdy = options.idy;\n        } else {\n          throw is.invalidParameterError('options.idy', 'number', options.idy);\n        }\n      }\n\n      if (is.defined(options.odx)) {\n        if (is.number(options.odx)) {\n          this.options.affineOdx = options.odx;\n        } else {\n          throw is.invalidParameterError('options.odx', 'number', options.odx);\n        }\n      }\n\n      if (is.defined(options.ody)) {\n        if (is.number(options.ody)) {\n          this.options.affineOdy = options.ody;\n        } else {\n          throw is.invalidParameterError('options.ody', 'number', options.ody);\n        }\n      }\n\n      if (is.defined(options.interpolator)) {\n        if (is.inArray(options.interpolator, Object.values(this.constructor.interpolators))) {\n          this.options.affineInterpolator = options.interpolator;\n        } else {\n          throw is.invalidParameterError('options.interpolator', 'valid interpolator name', options.interpolator);\n        }\n      }\n    } else {\n      throw is.invalidParameterError('options', 'object', options);\n    }\n  }\n\n  return this;\n}\n/**\n * Sharpen the image.\n *\n * When used without parameters, performs a fast, mild sharpen of the output image.\n *\n * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n * Fine-grained control over the level of sharpening in \"flat\" (m1) and \"jagged\" (m2) areas is available.\n *\n * See {@link https://www.libvips.org/API/current/libvips-convolution.html#vips-sharpen|libvips sharpen} operation.\n *\n * @example\n * const data = await sharp(input).sharpen().toBuffer();\n *\n * @example\n * const data = await sharp(input).sharpen({ sigma: 2 }).toBuffer();\n *\n * @example\n * const data = await sharp(input)\n *   .sharpen({\n *     sigma: 2,\n *     m1: 0,\n *     m2: 3,\n *     x1: 3,\n *     y2: 15,\n *     y3: 15,\n *   })\n *   .toBuffer();\n *\n * @param {Object|number} [options] - if present, is an Object with attributes\n * @param {number} [options.sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`, between 0.000001 and 10\n * @param {number} [options.m1=1.0] - the level of sharpening to apply to \"flat\" areas, between 0 and 1000000\n * @param {number} [options.m2=2.0] - the level of sharpening to apply to \"jagged\" areas, between 0 and 1000000\n * @param {number} [options.x1=2.0] - threshold between \"flat\" and \"jagged\", between 0 and 1000000\n * @param {number} [options.y2=10.0] - maximum amount of brightening, between 0 and 1000000\n * @param {number} [options.y3=20.0] - maximum amount of darkening, between 0 and 1000000\n * @param {number} [flat] - (deprecated) see `options.m1`.\n * @param {number} [jagged] - (deprecated) see `options.m2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction sharpen(options, flat, jagged) {\n  if (!is.defined(options)) {\n    // No arguments: default to mild sharpen\n    this.options.sharpenSigma = -1;\n  } else if (is.bool(options)) {\n    // Deprecated boolean argument: apply mild sharpen?\n    this.options.sharpenSigma = options ? -1 : 0;\n  } else if (is.number(options) && is.inRange(options, 0.01, 10000)) {\n    // Deprecated numeric argument: specific sigma\n    this.options.sharpenSigma = options; // Deprecated control over flat areas\n\n    if (is.defined(flat)) {\n      if (is.number(flat) && is.inRange(flat, 0, 10000)) {\n        this.options.sharpenM1 = flat;\n      } else {\n        throw is.invalidParameterError('flat', 'number between 0 and 10000', flat);\n      }\n    } // Deprecated control over jagged areas\n\n\n    if (is.defined(jagged)) {\n      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {\n        this.options.sharpenM2 = jagged;\n      } else {\n        throw is.invalidParameterError('jagged', 'number between 0 and 10000', jagged);\n      }\n    }\n  } else if (is.plainObject(options)) {\n    if (is.number(options.sigma) && is.inRange(options.sigma, 0.000001, 10)) {\n      this.options.sharpenSigma = options.sigma;\n    } else {\n      throw is.invalidParameterError('options.sigma', 'number between 0.000001 and 10', options.sigma);\n    }\n\n    if (is.defined(options.m1)) {\n      if (is.number(options.m1) && is.inRange(options.m1, 0, 1000000)) {\n        this.options.sharpenM1 = options.m1;\n      } else {\n        throw is.invalidParameterError('options.m1', 'number between 0 and 1000000', options.m1);\n      }\n    }\n\n    if (is.defined(options.m2)) {\n      if (is.number(options.m2) && is.inRange(options.m2, 0, 1000000)) {\n        this.options.sharpenM2 = options.m2;\n      } else {\n        throw is.invalidParameterError('options.m2', 'number between 0 and 1000000', options.m2);\n      }\n    }\n\n    if (is.defined(options.x1)) {\n      if (is.number(options.x1) && is.inRange(options.x1, 0, 1000000)) {\n        this.options.sharpenX1 = options.x1;\n      } else {\n        throw is.invalidParameterError('options.x1', 'number between 0 and 1000000', options.x1);\n      }\n    }\n\n    if (is.defined(options.y2)) {\n      if (is.number(options.y2) && is.inRange(options.y2, 0, 1000000)) {\n        this.options.sharpenY2 = options.y2;\n      } else {\n        throw is.invalidParameterError('options.y2', 'number between 0 and 1000000', options.y2);\n      }\n    }\n\n    if (is.defined(options.y3)) {\n      if (is.number(options.y3) && is.inRange(options.y3, 0, 1000000)) {\n        this.options.sharpenY3 = options.y3;\n      } else {\n        throw is.invalidParameterError('options.y3', 'number between 0 and 1000000', options.y3);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.01 and 10000', options);\n  }\n\n  return this;\n}\n/**\n * Apply median filter.\n * When used without parameters the default window is 3x3.\n *\n * @example\n * const output = await sharp(input).median().toBuffer();\n *\n * @example\n * const output = await sharp(input).median(5).toBuffer();\n *\n * @param {number} [size=3] square mask size: size x size\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction median(size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw is.invalidParameterError('size', 'integer between 1 and 1000', size);\n  }\n\n  return this;\n}\n/**\n * Blur the image.\n *\n * When used without parameters, performs a fast 3x3 box blur (equivalent to a box linear filter).\n *\n * When a `sigma` is provided, performs a slower, more accurate Gaussian blur.\n *\n * @example\n * const boxBlurred = await sharp(input)\n *   .blur()\n *   .toBuffer();\n *\n * @example\n * const gaussianBlurred = await sharp(input)\n *   .blur(5)\n *   .toBuffer();\n *\n * @param {number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction blur(sigma) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild blur\n    this.options.blurSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild blur?\n    this.options.blurSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.blurSigma = sigma;\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.3 and 1000', sigma);\n  }\n\n  return this;\n}\n/**\n * Merge alpha transparency channel, if any, with a background, then remove the alpha channel.\n *\n * See also {@link /api-channel#removealpha|removeAlpha}.\n *\n * @example\n * await sharp(rgbaInput)\n *   .flatten({ background: '#F0A703' })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {string|Object} [options.background={r: 0, g: 0, b: 0}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black.\n * @returns {Sharp}\n */\n\n\nfunction flatten(options) {\n  this.options.flatten = is.bool(options) ? options : true;\n\n  if (is.object(options)) {\n    this._setBackgroundColourOption('flattenBackground', options.background);\n  }\n\n  return this;\n}\n/**\n * Ensure the image has an alpha channel\n * with all white pixel values made fully transparent.\n *\n * Existing alpha channel values for non-white pixels remain unchanged.\n *\n * This feature is experimental and the API may change.\n *\n * @since 0.32.1\n *\n * @example\n * await sharp(rgbInput)\n *   .unflatten()\n *   .toBuffer();\n *\n * @example\n * await sharp(rgbInput)\n *   .threshold(128, { grayscale: false }) // converter bright pixels to white\n *   .unflatten()\n *   .toBuffer();\n */\n\n\nfunction unflatten() {\n  this.options.unflatten = true;\n  return this;\n}\n/**\n * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`\n * then increasing the encoding (brighten) post-resize at a factor of `gamma`.\n * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation\n * when applying a gamma correction.\n *\n * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n *\n * @param {number} [gamma=2.2] value between 1.0 and 3.0.\n * @param {number} [gammaOut] value between 1.0 and 3.0. (optional, defaults to same as `gamma`)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction gamma(gamma, gammaOut) {\n  if (!is.defined(gamma)) {\n    // Default gamma correction of 2.2 (sRGB)\n    this.options.gamma = 2.2;\n  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {\n    this.options.gamma = gamma;\n  } else {\n    throw is.invalidParameterError('gamma', 'number between 1.0 and 3.0', gamma);\n  }\n\n  if (!is.defined(gammaOut)) {\n    // Default gamma correction for output is same as input\n    this.options.gammaOut = this.options.gamma;\n  } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {\n    this.options.gammaOut = gammaOut;\n  } else {\n    throw is.invalidParameterError('gammaOut', 'number between 1.0 and 3.0', gammaOut);\n  }\n\n  return this;\n}\n/**\n * Produce the \"negative\" of the image.\n *\n * @example\n * const output = await sharp(input)\n *   .negate()\n *   .toBuffer();\n *\n * @example\n * const output = await sharp(input)\n *   .negate({ alpha: false })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {Boolean} [options.alpha=true] Whether or not to negate any alpha channel\n * @returns {Sharp}\n */\n\n\nfunction negate(options) {\n  this.options.negate = is.bool(options) ? options : true;\n\n  if (is.plainObject(options) && 'alpha' in options) {\n    if (!is.bool(options.alpha)) {\n      throw is.invalidParameterError('alpha', 'should be boolean value', options.alpha);\n    } else {\n      this.options.negateAlpha = options.alpha;\n    }\n  }\n\n  return this;\n}\n/**\n * Enhance output image contrast by stretching its luminance to cover a full dynamic range.\n *\n * Uses a histogram-based approach, taking a default range of 1% to 99% to reduce sensitivity to noise at the extremes.\n *\n * Luminance values below the `lower` percentile will be underexposed by clipping to zero.\n * Luminance values above the `upper` percentile will be overexposed by clipping to the max pixel value.\n *\n * @example\n * const output = await sharp(input)\n *   .normalise()\n *   .toBuffer();\n *\n * @example\n * const output = await sharp(input)\n *   .normalise({ lower: 0, upper: 100 })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.lower=1] - Percentile below which luminance values will be underexposed.\n * @param {number} [options.upper=99] - Percentile above which luminance values will be overexposed.\n * @returns {Sharp}\n */\n\n\nfunction normalise(options) {\n  if (is.plainObject(options)) {\n    if (is.defined(options.lower)) {\n      if (is.number(options.lower) && is.inRange(options.lower, 0, 99)) {\n        this.options.normaliseLower = options.lower;\n      } else {\n        throw is.invalidParameterError('lower', 'number between 0 and 99', options.lower);\n      }\n    }\n\n    if (is.defined(options.upper)) {\n      if (is.number(options.upper) && is.inRange(options.upper, 1, 100)) {\n        this.options.normaliseUpper = options.upper;\n      } else {\n        throw is.invalidParameterError('upper', 'number between 1 and 100', options.upper);\n      }\n    }\n  }\n\n  if (this.options.normaliseLower >= this.options.normaliseUpper) {\n    throw is.invalidParameterError('range', 'lower to be less than upper', `${this.options.normaliseLower} >= ${this.options.normaliseUpper}`);\n  }\n\n  this.options.normalise = true;\n  return this;\n}\n/**\n * Alternative spelling of normalise.\n *\n * @example\n * const output = await sharp(input)\n *   .normalize()\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.lower=1] - Percentile below which luminance values will be underexposed.\n * @param {number} [options.upper=99] - Percentile above which luminance values will be overexposed.\n * @returns {Sharp}\n */\n\n\nfunction normalize(options) {\n  return this.normalise(options);\n}\n/**\n * Perform contrast limiting adaptive histogram equalization\n * {@link https://en.wikipedia.org/wiki/Adaptive_histogram_equalization#Contrast_Limited_AHE|CLAHE}.\n *\n * This will, in general, enhance the clarity of the image by bringing out darker details.\n *\n * @since 0.28.3\n *\n * @example\n * const output = await sharp(input)\n *   .clahe({\n *     width: 3,\n *     height: 3,\n *   })\n *   .toBuffer();\n *\n * @param {Object} options\n * @param {number} options.width - Integral width of the search window, in pixels.\n * @param {number} options.height - Integral height of the search window, in pixels.\n * @param {number} [options.maxSlope=3] - Integral level of brightening, between 0 and 100, where 0 disables contrast limiting.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction clahe(options) {\n  if (is.plainObject(options)) {\n    if (is.integer(options.width) && options.width > 0) {\n      this.options.claheWidth = options.width;\n    } else {\n      throw is.invalidParameterError('width', 'integer greater than zero', options.width);\n    }\n\n    if (is.integer(options.height) && options.height > 0) {\n      this.options.claheHeight = options.height;\n    } else {\n      throw is.invalidParameterError('height', 'integer greater than zero', options.height);\n    }\n\n    if (is.defined(options.maxSlope)) {\n      if (is.integer(options.maxSlope) && is.inRange(options.maxSlope, 0, 100)) {\n        this.options.claheMaxSlope = options.maxSlope;\n      } else {\n        throw is.invalidParameterError('maxSlope', 'integer between 0 and 100', options.maxSlope);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n\n  return this;\n}\n/**\n * Convolve the image with the specified kernel.\n *\n * @example\n * sharp(input)\n *   .convolve({\n *     width: 3,\n *     height: 3,\n *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n *   })\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data representing the convolution\n *     // of the input image with the horizontal Sobel operator\n *   });\n *\n * @param {Object} kernel\n * @param {number} kernel.width - width of the kernel in pixels.\n * @param {number} kernel.height - height of the kernel in pixels.\n * @param {Array<number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n * @param {number} [kernel.scale=sum] - the scale of the kernel in pixels.\n * @param {number} [kernel.offset=0] - the offset of the kernel in pixels.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction convolve(kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) || !is.integer(kernel.width) || !is.integer(kernel.height) || !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) || kernel.height * kernel.width !== kernel.kernel.length) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  } // Default scale is sum of kernel values\n\n\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  } // Clip scale to a minimum value of 1\n\n\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n\n  this.options.convKernel = kernel;\n  return this;\n}\n/**\n * Any pixel value greater than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n * @param {number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied.\n * @param {Object} [options]\n * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale.\n * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction threshold(threshold, options) {\n  if (!is.defined(threshold)) {\n    this.options.threshold = 128;\n  } else if (is.bool(threshold)) {\n    this.options.threshold = threshold ? 128 : 0;\n  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {\n    this.options.threshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'integer between 0 and 255', threshold);\n  }\n\n  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {\n    this.options.thresholdGrayscale = true;\n  } else {\n    this.options.thresholdGrayscale = false;\n  }\n\n  return this;\n}\n/**\n * Perform a bitwise boolean operation with operand image.\n *\n * This operation creates an output image where each pixel is the result of\n * the selected bitwise boolean `operation` between the corresponding pixels of the input images.\n *\n * @param {Buffer|string} operand - Buffer containing image data or string containing the path to an image file.\n * @param {string} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively.\n * @param {Object} [options]\n * @param {Object} [options.raw] - describes operand when using raw pixel data.\n * @param {number} [options.raw.width]\n * @param {number} [options.raw.height]\n * @param {number} [options.raw.channels]\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction boolean(operand, operator, options) {\n  this.options.boolean = this._createInputDescriptor(operand, options);\n\n  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {\n    this.options.booleanOp = operator;\n  } else {\n    throw is.invalidParameterError('operator', 'one of: and, or, eor', operator);\n  }\n\n  return this;\n}\n/**\n * Apply the linear formula `a` * input + `b` to the image to adjust image levels.\n *\n * When a single number is provided, it will be used for all image channels.\n * When an array of numbers is provided, the array length must match the number of channels.\n *\n * @example\n * await sharp(input)\n *   .linear(0.5, 2)\n *   .toBuffer();\n *\n * @example\n * await sharp(rgbInput)\n *   .linear(\n *     [0.25, 0.5, 0.75],\n *     [150, 100, 50]\n *   )\n *   .toBuffer();\n *\n * @param {(number|number[])} [a=[]] multiplier\n * @param {(number|number[])} [b=[]] offset\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction linear(a, b) {\n  if (!is.defined(a) && is.number(b)) {\n    a = 1.0;\n  } else if (is.number(a) && !is.defined(b)) {\n    b = 0.0;\n  }\n\n  if (!is.defined(a)) {\n    this.options.linearA = [];\n  } else if (is.number(a)) {\n    this.options.linearA = [a];\n  } else if (Array.isArray(a) && a.length && a.every(is.number)) {\n    this.options.linearA = a;\n  } else {\n    throw is.invalidParameterError('a', 'number or array of numbers', a);\n  }\n\n  if (!is.defined(b)) {\n    this.options.linearB = [];\n  } else if (is.number(b)) {\n    this.options.linearB = [b];\n  } else if (Array.isArray(b) && b.length && b.every(is.number)) {\n    this.options.linearB = b;\n  } else {\n    throw is.invalidParameterError('b', 'number or array of numbers', b);\n  }\n\n  if (this.options.linearA.length !== this.options.linearB.length) {\n    throw new Error('Expected a and b to be arrays of the same length');\n  }\n\n  return this;\n}\n/**\n * Recomb the image with the specified matrix.\n *\n * @since 0.21.1\n *\n * @example\n * sharp(input)\n *   .recomb([\n *    [0.3588, 0.7044, 0.1368],\n *    [0.2990, 0.5870, 0.1140],\n *    [0.2392, 0.4696, 0.0912],\n *   ])\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data after applying the recomb\n *     // With this example input, a sepia filter has been applied\n *   });\n *\n * @param {Array<Array<number>>} inputMatrix - 3x3 Recombination matrix\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction recomb(inputMatrix) {\n  if (!Array.isArray(inputMatrix) || inputMatrix.length !== 3 || inputMatrix[0].length !== 3 || inputMatrix[1].length !== 3 || inputMatrix[2].length !== 3) {\n    // must pass in a kernel\n    throw new Error('Invalid recombination matrix');\n  }\n\n  this.options.recombMatrix = [inputMatrix[0][0], inputMatrix[0][1], inputMatrix[0][2], inputMatrix[1][0], inputMatrix[1][1], inputMatrix[1][2], inputMatrix[2][0], inputMatrix[2][1], inputMatrix[2][2]].map(Number);\n  return this;\n}\n/**\n * Transforms the image using brightness, saturation, hue rotation, and lightness.\n * Brightness and lightness both operate on luminance, with the difference being that\n * brightness is multiplicative whereas lightness is additive.\n *\n * @since 0.22.1\n *\n * @example\n * // increase brightness by a factor of 2\n * const output = await sharp(input)\n *   .modulate({\n *     brightness: 2\n *   })\n *   .toBuffer();\n *\n * @example\n * // hue-rotate by 180 degrees\n * const output = await sharp(input)\n *   .modulate({\n *     hue: 180\n *   })\n *   .toBuffer();\n *\n * @example\n * // increase lightness by +50\n * const output = await sharp(input)\n *   .modulate({\n *     lightness: 50\n *   })\n *   .toBuffer();\n *\n * @example\n * // decreate brightness and saturation while also hue-rotating by 90 degrees\n * const output = await sharp(input)\n *   .modulate({\n *     brightness: 0.5,\n *     saturation: 0.5,\n *     hue: 90,\n *   })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.brightness] Brightness multiplier\n * @param {number} [options.saturation] Saturation multiplier\n * @param {number} [options.hue] Degrees for hue rotation\n * @param {number} [options.lightness] Lightness addend\n * @returns {Sharp}\n */\n\n\nfunction modulate(options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n\n  if ('brightness' in options) {\n    if (is.number(options.brightness) && options.brightness >= 0) {\n      this.options.brightness = options.brightness;\n    } else {\n      throw is.invalidParameterError('brightness', 'number above zero', options.brightness);\n    }\n  }\n\n  if ('saturation' in options) {\n    if (is.number(options.saturation) && options.saturation >= 0) {\n      this.options.saturation = options.saturation;\n    } else {\n      throw is.invalidParameterError('saturation', 'number above zero', options.saturation);\n    }\n  }\n\n  if ('hue' in options) {\n    if (is.integer(options.hue)) {\n      this.options.hue = options.hue % 360;\n    } else {\n      throw is.invalidParameterError('hue', 'number', options.hue);\n    }\n  }\n\n  if ('lightness' in options) {\n    if (is.number(options.lightness)) {\n      this.options.lightness = options.lightness;\n    } else {\n      throw is.invalidParameterError('lightness', 'number', options.lightness);\n    }\n  }\n\n  return this;\n}\n/**\n * Decorate the Sharp prototype with operation-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    rotate,\n    flip,\n    flop,\n    affine,\n    sharpen,\n    median,\n    blur,\n    flatten,\n    unflatten,\n    gamma,\n    negate,\n    normalise,\n    normalize,\n    clahe,\n    convolve,\n    threshold,\n    boolean,\n    linear,\n    recomb,\n    modulate\n  });\n};","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/node_modules/sharp/lib/operation.js"],"names":["color","require","is","rotate","angle","options","useExifOrientation","rotationAngle","debuglog","defined","integer","number","object","background","backgroundColour","rotationBackground","red","green","blue","Math","round","alpha","invalidParameterError","flip","bool","flop","affine","matrix","flatMatrix","concat","length","every","affineMatrix","_setBackgroundColourOption","idx","affineIdx","idy","affineIdy","odx","affineOdx","ody","affineOdy","interpolator","inArray","Object","values","constructor","interpolators","affineInterpolator","sharpen","flat","jagged","sharpenSigma","inRange","sharpenM1","sharpenM2","plainObject","sigma","m1","m2","x1","sharpenX1","y2","sharpenY2","y3","sharpenY3","median","size","medianSize","blur","blurSigma","flatten","unflatten","gamma","gammaOut","negate","negateAlpha","normalise","lower","normaliseLower","upper","normaliseUpper","normalize","clahe","width","claheWidth","height","claheHeight","maxSlope","claheMaxSlope","convolve","kernel","Array","isArray","Error","scale","reduce","a","b","offset","convKernel","threshold","greyscale","grayscale","thresholdGrayscale","boolean","operand","operator","_createInputDescriptor","string","booleanOp","linear","linearA","linearB","recomb","inputMatrix","recombMatrix","map","Number","modulate","brightness","saturation","hue","lightness","module","exports","Sharp","assign","prototype"],"mappings":"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","sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst color = require('color');\nconst is = require('./is');\n\n/**\n * Rotate the output image by either an explicit angle\n * or auto-orient based on the EXIF `Orientation` tag.\n *\n * If an angle is provided, it is converted to a valid positive degree rotation.\n * For example, `-450` will produce a 270deg rotation.\n *\n * When rotating by an angle other than a multiple of 90,\n * the background colour can be provided with the `background` option.\n *\n * If no angle is provided, it is determined from the EXIF data.\n * Mirroring is supported and may infer the use of a flip operation.\n *\n * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * Only one rotation can occur per pipeline.\n * Previous calls to `rotate` in the same pipeline will be ignored.\n *\n * Method order is important when rotating, resizing and/or extracting regions,\n * for example `.rotate(x).extract(y)` will produce a different result to `.extract(y).rotate(x)`.\n *\n * @example\n * const pipeline = sharp()\n *   .rotate()\n *   .resize(null, 200)\n *   .toBuffer(function (err, outputBuffer, info) {\n *     // outputBuffer contains 200px high JPEG image data,\n *     // auto-rotated using EXIF Orientation tag\n *     // info.width and info.height contain the dimensions of the resized image\n *   });\n * readableStream.pipe(pipeline);\n *\n * @example\n * const rotateThenResize = await sharp(input)\n *   .rotate(90)\n *   .resize({ width: 16, height: 8, fit: 'fill' })\n *   .toBuffer();\n * const resizeThenRotate = await sharp(input)\n *   .resize({ width: 16, height: 8, fit: 'fill' })\n *   .rotate(90)\n *   .toBuffer();\n *\n * @param {number} [angle=auto] angle of rotation.\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {string|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction rotate (angle, options) {\n  if (this.options.useExifOrientation || this.options.angle || this.options.rotationAngle) {\n    this.options.debuglog('ignoring previous rotate options');\n  }\n  if (!is.defined(angle)) {\n    this.options.useExifOrientation = true;\n  } else if (is.integer(angle) && !(angle % 90)) {\n    this.options.angle = angle;\n  } else if (is.number(angle)) {\n    this.options.rotationAngle = angle;\n    if (is.object(options) && options.background) {\n      const backgroundColour = color(options.background);\n      this.options.rotationBackground = [\n        backgroundColour.red(),\n        backgroundColour.green(),\n        backgroundColour.blue(),\n        Math.round(backgroundColour.alpha() * 255)\n      ];\n    }\n  } else {\n    throw is.invalidParameterError('angle', 'numeric', angle);\n  }\n  return this;\n}\n\n/**\n * Flip the image about the vertical Y axis. This always occurs before rotation, if any.\n * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * @example\n * const output = await sharp(input).flip().toBuffer();\n *\n * @param {Boolean} [flip=true]\n * @returns {Sharp}\n */\nfunction flip (flip) {\n  this.options.flip = is.bool(flip) ? flip : true;\n  return this;\n}\n\n/**\n * Flop the image about the horizontal X axis. This always occurs before rotation, if any.\n * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * @example\n * const output = await sharp(input).flop().toBuffer();\n *\n * @param {Boolean} [flop=true]\n * @returns {Sharp}\n */\nfunction flop (flop) {\n  this.options.flop = is.bool(flop) ? flop : true;\n  return this;\n}\n\n/**\n * Perform an affine transform on an image. This operation will always occur after resizing, extraction and rotation, if any.\n *\n * You must provide an array of length 4 or a 2x2 affine transformation matrix.\n * By default, new pixels are filled with a black background. You can provide a background color with the `background` option.\n * A particular interpolator may also be specified. Set the `interpolator` option to an attribute of the `sharp.interpolators` Object e.g. `sharp.interpolators.nohalo`.\n *\n * In the case of a 2x2 matrix, the transform is:\n * - X = `matrix[0, 0]` \\* (x + `idx`) + `matrix[0, 1]` \\* (y + `idy`) + `odx`\n * - Y = `matrix[1, 0]` \\* (x + `idx`) + `matrix[1, 1]` \\* (y + `idy`) + `ody`\n *\n * where:\n * - x and y are the coordinates in input image.\n * - X and Y are the coordinates in output image.\n * - (0,0) is the upper left corner.\n *\n * @since 0.27.0\n *\n * @example\n * const pipeline = sharp()\n *   .affine([[1, 0.3], [0.1, 0.7]], {\n *      background: 'white',\n *      interpolator: sharp.interpolators.nohalo\n *   })\n *   .toBuffer((err, outputBuffer, info) => {\n *      // outputBuffer contains the transformed image\n *      // info.width and info.height contain the new dimensions\n *   });\n *\n * inputStream\n *   .pipe(pipeline);\n *\n * @param {Array<Array<number>>|Array<number>} matrix - affine transformation matrix\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {String|Object} [options.background=\"#000000\"] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @param {Number} [options.idx=0] - input horizontal offset\n * @param {Number} [options.idy=0] - input vertical offset\n * @param {Number} [options.odx=0] - output horizontal offset\n * @param {Number} [options.ody=0] - output vertical offset\n * @param {String} [options.interpolator=sharp.interpolators.bicubic] - interpolator\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction affine (matrix, options) {\n  const flatMatrix = [].concat(...matrix);\n  if (flatMatrix.length === 4 && flatMatrix.every(is.number)) {\n    this.options.affineMatrix = flatMatrix;\n  } else {\n    throw is.invalidParameterError('matrix', '1x4 or 2x2 array', matrix);\n  }\n\n  if (is.defined(options)) {\n    if (is.object(options)) {\n      this._setBackgroundColourOption('affineBackground', options.background);\n      if (is.defined(options.idx)) {\n        if (is.number(options.idx)) {\n          this.options.affineIdx = options.idx;\n        } else {\n          throw is.invalidParameterError('options.idx', 'number', options.idx);\n        }\n      }\n      if (is.defined(options.idy)) {\n        if (is.number(options.idy)) {\n          this.options.affineIdy = options.idy;\n        } else {\n          throw is.invalidParameterError('options.idy', 'number', options.idy);\n        }\n      }\n      if (is.defined(options.odx)) {\n        if (is.number(options.odx)) {\n          this.options.affineOdx = options.odx;\n        } else {\n          throw is.invalidParameterError('options.odx', 'number', options.odx);\n        }\n      }\n      if (is.defined(options.ody)) {\n        if (is.number(options.ody)) {\n          this.options.affineOdy = options.ody;\n        } else {\n          throw is.invalidParameterError('options.ody', 'number', options.ody);\n        }\n      }\n      if (is.defined(options.interpolator)) {\n        if (is.inArray(options.interpolator, Object.values(this.constructor.interpolators))) {\n          this.options.affineInterpolator = options.interpolator;\n        } else {\n          throw is.invalidParameterError('options.interpolator', 'valid interpolator name', options.interpolator);\n        }\n      }\n    } else {\n      throw is.invalidParameterError('options', 'object', options);\n    }\n  }\n\n  return this;\n}\n\n/**\n * Sharpen the image.\n *\n * When used without parameters, performs a fast, mild sharpen of the output image.\n *\n * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n * Fine-grained control over the level of sharpening in \"flat\" (m1) and \"jagged\" (m2) areas is available.\n *\n * See {@link https://www.libvips.org/API/current/libvips-convolution.html#vips-sharpen|libvips sharpen} operation.\n *\n * @example\n * const data = await sharp(input).sharpen().toBuffer();\n *\n * @example\n * const data = await sharp(input).sharpen({ sigma: 2 }).toBuffer();\n *\n * @example\n * const data = await sharp(input)\n *   .sharpen({\n *     sigma: 2,\n *     m1: 0,\n *     m2: 3,\n *     x1: 3,\n *     y2: 15,\n *     y3: 15,\n *   })\n *   .toBuffer();\n *\n * @param {Object|number} [options] - if present, is an Object with attributes\n * @param {number} [options.sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`, between 0.000001 and 10\n * @param {number} [options.m1=1.0] - the level of sharpening to apply to \"flat\" areas, between 0 and 1000000\n * @param {number} [options.m2=2.0] - the level of sharpening to apply to \"jagged\" areas, between 0 and 1000000\n * @param {number} [options.x1=2.0] - threshold between \"flat\" and \"jagged\", between 0 and 1000000\n * @param {number} [options.y2=10.0] - maximum amount of brightening, between 0 and 1000000\n * @param {number} [options.y3=20.0] - maximum amount of darkening, between 0 and 1000000\n * @param {number} [flat] - (deprecated) see `options.m1`.\n * @param {number} [jagged] - (deprecated) see `options.m2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction sharpen (options, flat, jagged) {\n  if (!is.defined(options)) {\n    // No arguments: default to mild sharpen\n    this.options.sharpenSigma = -1;\n  } else if (is.bool(options)) {\n    // Deprecated boolean argument: apply mild sharpen?\n    this.options.sharpenSigma = options ? -1 : 0;\n  } else if (is.number(options) && is.inRange(options, 0.01, 10000)) {\n    // Deprecated numeric argument: specific sigma\n    this.options.sharpenSigma = options;\n    // Deprecated control over flat areas\n    if (is.defined(flat)) {\n      if (is.number(flat) && is.inRange(flat, 0, 10000)) {\n        this.options.sharpenM1 = flat;\n      } else {\n        throw is.invalidParameterError('flat', 'number between 0 and 10000', flat);\n      }\n    }\n    // Deprecated control over jagged areas\n    if (is.defined(jagged)) {\n      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {\n        this.options.sharpenM2 = jagged;\n      } else {\n        throw is.invalidParameterError('jagged', 'number between 0 and 10000', jagged);\n      }\n    }\n  } else if (is.plainObject(options)) {\n    if (is.number(options.sigma) && is.inRange(options.sigma, 0.000001, 10)) {\n      this.options.sharpenSigma = options.sigma;\n    } else {\n      throw is.invalidParameterError('options.sigma', 'number between 0.000001 and 10', options.sigma);\n    }\n    if (is.defined(options.m1)) {\n      if (is.number(options.m1) && is.inRange(options.m1, 0, 1000000)) {\n        this.options.sharpenM1 = options.m1;\n      } else {\n        throw is.invalidParameterError('options.m1', 'number between 0 and 1000000', options.m1);\n      }\n    }\n    if (is.defined(options.m2)) {\n      if (is.number(options.m2) && is.inRange(options.m2, 0, 1000000)) {\n        this.options.sharpenM2 = options.m2;\n      } else {\n        throw is.invalidParameterError('options.m2', 'number between 0 and 1000000', options.m2);\n      }\n    }\n    if (is.defined(options.x1)) {\n      if (is.number(options.x1) && is.inRange(options.x1, 0, 1000000)) {\n        this.options.sharpenX1 = options.x1;\n      } else {\n        throw is.invalidParameterError('options.x1', 'number between 0 and 1000000', options.x1);\n      }\n    }\n    if (is.defined(options.y2)) {\n      if (is.number(options.y2) && is.inRange(options.y2, 0, 1000000)) {\n        this.options.sharpenY2 = options.y2;\n      } else {\n        throw is.invalidParameterError('options.y2', 'number between 0 and 1000000', options.y2);\n      }\n    }\n    if (is.defined(options.y3)) {\n      if (is.number(options.y3) && is.inRange(options.y3, 0, 1000000)) {\n        this.options.sharpenY3 = options.y3;\n      } else {\n        throw is.invalidParameterError('options.y3', 'number between 0 and 1000000', options.y3);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.01 and 10000', options);\n  }\n  return this;\n}\n\n/**\n * Apply median filter.\n * When used without parameters the default window is 3x3.\n *\n * @example\n * const output = await sharp(input).median().toBuffer();\n *\n * @example\n * const output = await sharp(input).median(5).toBuffer();\n *\n * @param {number} [size=3] square mask size: size x size\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction median (size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw is.invalidParameterError('size', 'integer between 1 and 1000', size);\n  }\n  return this;\n}\n\n/**\n * Blur the image.\n *\n * When used without parameters, performs a fast 3x3 box blur (equivalent to a box linear filter).\n *\n * When a `sigma` is provided, performs a slower, more accurate Gaussian blur.\n *\n * @example\n * const boxBlurred = await sharp(input)\n *   .blur()\n *   .toBuffer();\n *\n * @example\n * const gaussianBlurred = await sharp(input)\n *   .blur(5)\n *   .toBuffer();\n *\n * @param {number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction blur (sigma) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild blur\n    this.options.blurSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild blur?\n    this.options.blurSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.blurSigma = sigma;\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.3 and 1000', sigma);\n  }\n  return this;\n}\n\n/**\n * Merge alpha transparency channel, if any, with a background, then remove the alpha channel.\n *\n * See also {@link /api-channel#removealpha|removeAlpha}.\n *\n * @example\n * await sharp(rgbaInput)\n *   .flatten({ background: '#F0A703' })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {string|Object} [options.background={r: 0, g: 0, b: 0}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black.\n * @returns {Sharp}\n */\nfunction flatten (options) {\n  this.options.flatten = is.bool(options) ? options : true;\n  if (is.object(options)) {\n    this._setBackgroundColourOption('flattenBackground', options.background);\n  }\n  return this;\n}\n\n/**\n * Ensure the image has an alpha channel\n * with all white pixel values made fully transparent.\n *\n * Existing alpha channel values for non-white pixels remain unchanged.\n *\n * This feature is experimental and the API may change.\n *\n * @since 0.32.1\n *\n * @example\n * await sharp(rgbInput)\n *   .unflatten()\n *   .toBuffer();\n *\n * @example\n * await sharp(rgbInput)\n *   .threshold(128, { grayscale: false }) // converter bright pixels to white\n *   .unflatten()\n *   .toBuffer();\n */\nfunction unflatten () {\n  this.options.unflatten = true;\n  return this;\n}\n\n/**\n * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`\n * then increasing the encoding (brighten) post-resize at a factor of `gamma`.\n * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation\n * when applying a gamma correction.\n *\n * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n *\n * @param {number} [gamma=2.2] value between 1.0 and 3.0.\n * @param {number} [gammaOut] value between 1.0 and 3.0. (optional, defaults to same as `gamma`)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction gamma (gamma, gammaOut) {\n  if (!is.defined(gamma)) {\n    // Default gamma correction of 2.2 (sRGB)\n    this.options.gamma = 2.2;\n  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {\n    this.options.gamma = gamma;\n  } else {\n    throw is.invalidParameterError('gamma', 'number between 1.0 and 3.0', gamma);\n  }\n  if (!is.defined(gammaOut)) {\n    // Default gamma correction for output is same as input\n    this.options.gammaOut = this.options.gamma;\n  } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {\n    this.options.gammaOut = gammaOut;\n  } else {\n    throw is.invalidParameterError('gammaOut', 'number between 1.0 and 3.0', gammaOut);\n  }\n  return this;\n}\n\n/**\n * Produce the \"negative\" of the image.\n *\n * @example\n * const output = await sharp(input)\n *   .negate()\n *   .toBuffer();\n *\n * @example\n * const output = await sharp(input)\n *   .negate({ alpha: false })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {Boolean} [options.alpha=true] Whether or not to negate any alpha channel\n * @returns {Sharp}\n */\nfunction negate (options) {\n  this.options.negate = is.bool(options) ? options : true;\n  if (is.plainObject(options) && 'alpha' in options) {\n    if (!is.bool(options.alpha)) {\n      throw is.invalidParameterError('alpha', 'should be boolean value', options.alpha);\n    } else {\n      this.options.negateAlpha = options.alpha;\n    }\n  }\n  return this;\n}\n\n/**\n * Enhance output image contrast by stretching its luminance to cover a full dynamic range.\n *\n * Uses a histogram-based approach, taking a default range of 1% to 99% to reduce sensitivity to noise at the extremes.\n *\n * Luminance values below the `lower` percentile will be underexposed by clipping to zero.\n * Luminance values above the `upper` percentile will be overexposed by clipping to the max pixel value.\n *\n * @example\n * const output = await sharp(input)\n *   .normalise()\n *   .toBuffer();\n *\n * @example\n * const output = await sharp(input)\n *   .normalise({ lower: 0, upper: 100 })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.lower=1] - Percentile below which luminance values will be underexposed.\n * @param {number} [options.upper=99] - Percentile above which luminance values will be overexposed.\n * @returns {Sharp}\n */\nfunction normalise (options) {\n  if (is.plainObject(options)) {\n    if (is.defined(options.lower)) {\n      if (is.number(options.lower) && is.inRange(options.lower, 0, 99)) {\n        this.options.normaliseLower = options.lower;\n      } else {\n        throw is.invalidParameterError('lower', 'number between 0 and 99', options.lower);\n      }\n    }\n    if (is.defined(options.upper)) {\n      if (is.number(options.upper) && is.inRange(options.upper, 1, 100)) {\n        this.options.normaliseUpper = options.upper;\n      } else {\n        throw is.invalidParameterError('upper', 'number between 1 and 100', options.upper);\n      }\n    }\n  }\n  if (this.options.normaliseLower >= this.options.normaliseUpper) {\n    throw is.invalidParameterError('range', 'lower to be less than upper',\n      `${this.options.normaliseLower} >= ${this.options.normaliseUpper}`);\n  }\n  this.options.normalise = true;\n  return this;\n}\n\n/**\n * Alternative spelling of normalise.\n *\n * @example\n * const output = await sharp(input)\n *   .normalize()\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.lower=1] - Percentile below which luminance values will be underexposed.\n * @param {number} [options.upper=99] - Percentile above which luminance values will be overexposed.\n * @returns {Sharp}\n */\nfunction normalize (options) {\n  return this.normalise(options);\n}\n\n/**\n * Perform contrast limiting adaptive histogram equalization\n * {@link https://en.wikipedia.org/wiki/Adaptive_histogram_equalization#Contrast_Limited_AHE|CLAHE}.\n *\n * This will, in general, enhance the clarity of the image by bringing out darker details.\n *\n * @since 0.28.3\n *\n * @example\n * const output = await sharp(input)\n *   .clahe({\n *     width: 3,\n *     height: 3,\n *   })\n *   .toBuffer();\n *\n * @param {Object} options\n * @param {number} options.width - Integral width of the search window, in pixels.\n * @param {number} options.height - Integral height of the search window, in pixels.\n * @param {number} [options.maxSlope=3] - Integral level of brightening, between 0 and 100, where 0 disables contrast limiting.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction clahe (options) {\n  if (is.plainObject(options)) {\n    if (is.integer(options.width) && options.width > 0) {\n      this.options.claheWidth = options.width;\n    } else {\n      throw is.invalidParameterError('width', 'integer greater than zero', options.width);\n    }\n    if (is.integer(options.height) && options.height > 0) {\n      this.options.claheHeight = options.height;\n    } else {\n      throw is.invalidParameterError('height', 'integer greater than zero', options.height);\n    }\n    if (is.defined(options.maxSlope)) {\n      if (is.integer(options.maxSlope) && is.inRange(options.maxSlope, 0, 100)) {\n        this.options.claheMaxSlope = options.maxSlope;\n      } else {\n        throw is.invalidParameterError('maxSlope', 'integer between 0 and 100', options.maxSlope);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n  return this;\n}\n\n/**\n * Convolve the image with the specified kernel.\n *\n * @example\n * sharp(input)\n *   .convolve({\n *     width: 3,\n *     height: 3,\n *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n *   })\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data representing the convolution\n *     // of the input image with the horizontal Sobel operator\n *   });\n *\n * @param {Object} kernel\n * @param {number} kernel.width - width of the kernel in pixels.\n * @param {number} kernel.height - height of the kernel in pixels.\n * @param {Array<number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n * @param {number} [kernel.scale=sum] - the scale of the kernel in pixels.\n * @param {number} [kernel.offset=0] - the offset of the kernel in pixels.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction convolve (kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) ||\n      !is.integer(kernel.width) || !is.integer(kernel.height) ||\n      !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) ||\n      kernel.height * kernel.width !== kernel.kernel.length\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  }\n  // Default scale is sum of kernel values\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  }\n  // Clip scale to a minimum value of 1\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n  this.options.convKernel = kernel;\n  return this;\n}\n\n/**\n * Any pixel value greater than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n * @param {number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied.\n * @param {Object} [options]\n * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale.\n * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction threshold (threshold, options) {\n  if (!is.defined(threshold)) {\n    this.options.threshold = 128;\n  } else if (is.bool(threshold)) {\n    this.options.threshold = threshold ? 128 : 0;\n  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {\n    this.options.threshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'integer between 0 and 255', threshold);\n  }\n  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {\n    this.options.thresholdGrayscale = true;\n  } else {\n    this.options.thresholdGrayscale = false;\n  }\n  return this;\n}\n\n/**\n * Perform a bitwise boolean operation with operand image.\n *\n * This operation creates an output image where each pixel is the result of\n * the selected bitwise boolean `operation` between the corresponding pixels of the input images.\n *\n * @param {Buffer|string} operand - Buffer containing image data or string containing the path to an image file.\n * @param {string} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively.\n * @param {Object} [options]\n * @param {Object} [options.raw] - describes operand when using raw pixel data.\n * @param {number} [options.raw.width]\n * @param {number} [options.raw.height]\n * @param {number} [options.raw.channels]\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction boolean (operand, operator, options) {\n  this.options.boolean = this._createInputDescriptor(operand, options);\n  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {\n    this.options.booleanOp = operator;\n  } else {\n    throw is.invalidParameterError('operator', 'one of: and, or, eor', operator);\n  }\n  return this;\n}\n\n/**\n * Apply the linear formula `a` * input + `b` to the image to adjust image levels.\n *\n * When a single number is provided, it will be used for all image channels.\n * When an array of numbers is provided, the array length must match the number of channels.\n *\n * @example\n * await sharp(input)\n *   .linear(0.5, 2)\n *   .toBuffer();\n *\n * @example\n * await sharp(rgbInput)\n *   .linear(\n *     [0.25, 0.5, 0.75],\n *     [150, 100, 50]\n *   )\n *   .toBuffer();\n *\n * @param {(number|number[])} [a=[]] multiplier\n * @param {(number|number[])} [b=[]] offset\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction linear (a, b) {\n  if (!is.defined(a) && is.number(b)) {\n    a = 1.0;\n  } else if (is.number(a) && !is.defined(b)) {\n    b = 0.0;\n  }\n  if (!is.defined(a)) {\n    this.options.linearA = [];\n  } else if (is.number(a)) {\n    this.options.linearA = [a];\n  } else if (Array.isArray(a) && a.length && a.every(is.number)) {\n    this.options.linearA = a;\n  } else {\n    throw is.invalidParameterError('a', 'number or array of numbers', a);\n  }\n  if (!is.defined(b)) {\n    this.options.linearB = [];\n  } else if (is.number(b)) {\n    this.options.linearB = [b];\n  } else if (Array.isArray(b) && b.length && b.every(is.number)) {\n    this.options.linearB = b;\n  } else {\n    throw is.invalidParameterError('b', 'number or array of numbers', b);\n  }\n  if (this.options.linearA.length !== this.options.linearB.length) {\n    throw new Error('Expected a and b to be arrays of the same length');\n  }\n  return this;\n}\n\n/**\n * Recomb the image with the specified matrix.\n *\n * @since 0.21.1\n *\n * @example\n * sharp(input)\n *   .recomb([\n *    [0.3588, 0.7044, 0.1368],\n *    [0.2990, 0.5870, 0.1140],\n *    [0.2392, 0.4696, 0.0912],\n *   ])\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data after applying the recomb\n *     // With this example input, a sepia filter has been applied\n *   });\n *\n * @param {Array<Array<number>>} inputMatrix - 3x3 Recombination matrix\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction recomb (inputMatrix) {\n  if (!Array.isArray(inputMatrix) || inputMatrix.length !== 3 ||\n      inputMatrix[0].length !== 3 ||\n      inputMatrix[1].length !== 3 ||\n      inputMatrix[2].length !== 3\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid recombination matrix');\n  }\n  this.options.recombMatrix = [\n    inputMatrix[0][0], inputMatrix[0][1], inputMatrix[0][2],\n    inputMatrix[1][0], inputMatrix[1][1], inputMatrix[1][2],\n    inputMatrix[2][0], inputMatrix[2][1], inputMatrix[2][2]\n  ].map(Number);\n  return this;\n}\n\n/**\n * Transforms the image using brightness, saturation, hue rotation, and lightness.\n * Brightness and lightness both operate on luminance, with the difference being that\n * brightness is multiplicative whereas lightness is additive.\n *\n * @since 0.22.1\n *\n * @example\n * // increase brightness by a factor of 2\n * const output = await sharp(input)\n *   .modulate({\n *     brightness: 2\n *   })\n *   .toBuffer();\n *\n * @example\n * // hue-rotate by 180 degrees\n * const output = await sharp(input)\n *   .modulate({\n *     hue: 180\n *   })\n *   .toBuffer();\n *\n * @example\n * // increase lightness by +50\n * const output = await sharp(input)\n *   .modulate({\n *     lightness: 50\n *   })\n *   .toBuffer();\n *\n * @example\n * // decreate brightness and saturation while also hue-rotating by 90 degrees\n * const output = await sharp(input)\n *   .modulate({\n *     brightness: 0.5,\n *     saturation: 0.5,\n *     hue: 90,\n *   })\n *   .toBuffer();\n *\n * @param {Object} [options]\n * @param {number} [options.brightness] Brightness multiplier\n * @param {number} [options.saturation] Saturation multiplier\n * @param {number} [options.hue] Degrees for hue rotation\n * @param {number} [options.lightness] Lightness addend\n * @returns {Sharp}\n */\nfunction modulate (options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n  if ('brightness' in options) {\n    if (is.number(options.brightness) && options.brightness >= 0) {\n      this.options.brightness = options.brightness;\n    } else {\n      throw is.invalidParameterError('brightness', 'number above zero', options.brightness);\n    }\n  }\n  if ('saturation' in options) {\n    if (is.number(options.saturation) && options.saturation >= 0) {\n      this.options.saturation = options.saturation;\n    } else {\n      throw is.invalidParameterError('saturation', 'number above zero', options.saturation);\n    }\n  }\n  if ('hue' in options) {\n    if (is.integer(options.hue)) {\n      this.options.hue = options.hue % 360;\n    } else {\n      throw is.invalidParameterError('hue', 'number', options.hue);\n    }\n  }\n  if ('lightness' in options) {\n    if (is.number(options.lightness)) {\n      this.options.lightness = options.lightness;\n    } else {\n      throw is.invalidParameterError('lightness', 'number', options.lightness);\n    }\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with operation-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    rotate,\n    flip,\n    flop,\n    affine,\n    sharpen,\n    median,\n    blur,\n    flatten,\n    unflatten,\n    gamma,\n    negate,\n    normalise,\n    normalize,\n    clahe,\n    convolve,\n    threshold,\n    boolean,\n    linear,\n    recomb,\n    modulate\n  });\n};\n"]},"metadata":{},"sourceType":"script"}