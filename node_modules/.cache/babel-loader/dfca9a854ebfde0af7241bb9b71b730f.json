{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef, useEffect } from 'react';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid'; // import Jimp from 'jimp'\n\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  function embedMessageInImage(imageURL, message) {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const image = new Image();\n      image.crossOrigin = 'anonymous'; // Allow cross-origin image loading\n\n      image.onload = function () {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const messageLength = message.length;\n        const encodedMessage = [messageLength, ...message].map(char => char.charCodeAt(0));\n        let messageIndex = 0;\n        let messageEnd = false;\n\n        for (let y = 0; y < canvas.height; y++) {\n          for (let x = 0; x < canvas.width; x++) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n\n            if (!messageEnd) {\n              const red = pixel[0];\n              const green = pixel[1];\n              const blue = pixel[2]; // Embed the message bits into the least significant bits of the red, green, and blue channels\n\n              if (messageIndex < encodedMessage.length) {\n                const char = encodedMessage[messageIndex];\n                red = red & 0b11111110 | (char & 0b10000000) >> 7;\n                green = green & 0b11111110 | (char & 0b01000000) >> 6;\n                blue = blue & 0b11111110 | (char & 0b00100000) >> 5;\n                encodedMessage[messageIndex] = char << 1;\n                messageIndex++;\n              } else {\n                messageEnd = true;\n              } // Update the pixel with the modified RGB values\n\n\n              context.fillStyle = `rgb(${red}, ${green}, ${blue})`;\n              context.fillRect(x, y, 1, 1);\n            }\n          }\n\n          if (messageEnd) {\n            break;\n          }\n        }\n\n        const modifiedImageURL = canvas.toDataURL('image/jpeg');\n        resolve(modifiedImageURL);\n      };\n\n      image.onerror = function () {\n        reject(new Error('Failed to load image.'));\n      };\n\n      image.src = imageURL;\n    });\n  }\n\n  function decodeMessageFromImage(modifiedImageURL) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.crossOrigin = 'anonymous'; // Allow cross-origin image loading\n\n      image.onload = function () {\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const messageBytes = [];\n        let messageLength = 0;\n        let messageEnd = false;\n\n        for (let y = 0; y < canvas.height; y++) {\n          for (let x = 0; x < canvas.width; x++) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n\n            if (!messageEnd) {\n              const red = pixel[0];\n              const green = pixel[1];\n              const blue = pixel[2]; // Extract the least significant bits from the red, green, and blue channels\n\n              const char = (red & 0b00000001) << 7 | (green & 0b00000001) << 6 | (blue & 0b00000001) << 5;\n\n              if (messageLength === 0) {\n                messageLength = char;\n              } else {\n                messageBytes.push(char);\n\n                if (messageBytes.length === messageLength) {\n                  messageEnd = true;\n                  break;\n                }\n              }\n            }\n          }\n\n          if (messageEnd) {\n            break;\n          }\n        }\n\n        if (messageEnd) {\n          const originalMessage = messageBytes.map(byte => String.fromCharCode(byte)).join('');\n          resolve(originalMessage);\n        } else {\n          reject(new Error('No message found in the image.'));\n        }\n      };\n\n      image.onerror = function () {\n        reject(new Error('Failed to load image.'));\n      };\n\n      image.src = modifiedImageURL;\n    });\n  }\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const imageDataUrl = reader.result;\n        embedMessageInImage(imageDataUrl, \"hello\").then(modifiedImageURL => {\n          console.log('Modified Image URL:', modifiedImageURL);\n          return decodeMessageFromImage(modifiedImageURL);\n        }).then(originalMessage => {\n          console.log('Original Message:', originalMessage);\n        }).catch(error => {\n          console.error('Error:', error);\n        });\n      };\n\n      reader.readAsDataURL(img);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  const handleChange = e => {\n    setImg(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","useRef","useEffect","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","embedMessageInImage","imageURL","message","Promise","resolve","reject","canvas","document","createElement","image","Image","crossOrigin","onload","width","height","context","getContext","drawImage","messageLength","length","encodedMessage","map","char","charCodeAt","messageIndex","messageEnd","y","x","pixel","getImageData","red","green","blue","fillStyle","fillRect","modifiedImageURL","toDataURL","onerror","Error","src","decodeMessageFromImage","messageBytes","push","originalMessage","byte","String","fromCharCode","join","handleSend","storageRef","uploadTask","reader","FileReader","imageDataUrl","result","then","console","log","catch","error","readAsDataURL","on","snapshot","downloadURL","chatId","messages","id","senderId","uid","date","now","user","handleChange","e","target","files","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef, useEffect } from 'react'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\n// import Jimp from 'jimp'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n\r\n\r\n  \r\n  function embedMessageInImage(imageURL, message) {\r\n    return new Promise((resolve, reject) => {\r\n      const canvas = document.createElement('canvas');\r\n      const image = new Image();\r\n  \r\n      image.crossOrigin = 'anonymous'; // Allow cross-origin image loading\r\n      image.onload = function () {\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n  \r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0);\r\n  \r\n        const messageLength = message.length;\r\n        const encodedMessage = [messageLength, ...message].map((char) =>\r\n          char.charCodeAt(0)\r\n        );\r\n  \r\n        let messageIndex = 0;\r\n        let messageEnd = false;\r\n  \r\n        for (let y = 0; y < canvas.height; y++) {\r\n          for (let x = 0; x < canvas.width; x++) {\r\n            const pixel = context.getImageData(x, y, 1, 1).data;\r\n  \r\n            if (!messageEnd) {\r\n              const red = pixel[0];\r\n              const green = pixel[1];\r\n              const blue = pixel[2];\r\n  \r\n              // Embed the message bits into the least significant bits of the red, green, and blue channels\r\n              if (messageIndex < encodedMessage.length) {\r\n                const char = encodedMessage[messageIndex];\r\n                red = (red & 0b11111110) | ((char & 0b10000000) >> 7);\r\n                green = (green & 0b11111110) | ((char & 0b01000000) >> 6);\r\n                blue = (blue & 0b11111110) | ((char & 0b00100000) >> 5);\r\n  \r\n                encodedMessage[messageIndex] = char << 1;\r\n  \r\n                messageIndex++;\r\n              } else {\r\n                messageEnd = true;\r\n              }\r\n  \r\n              // Update the pixel with the modified RGB values\r\n              context.fillStyle = `rgb(${red}, ${green}, ${blue})`;\r\n              context.fillRect(x, y, 1, 1);\r\n            }\r\n          }\r\n  \r\n          if (messageEnd) {\r\n            break;\r\n          }\r\n        }\r\n  \r\n        const modifiedImageURL = canvas.toDataURL('image/jpeg');\r\n        resolve(modifiedImageURL);\r\n      };\r\n  \r\n      image.onerror = function () {\r\n        reject(new Error('Failed to load image.'));\r\n      };\r\n  \r\n      image.src = imageURL;\r\n    });\r\n  }\r\n  \r\n  function decodeMessageFromImage(modifiedImageURL) {\r\n    return new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n      image.crossOrigin = 'anonymous'; // Allow cross-origin image loading\r\n  \r\n      image.onload = function () {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n  \r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0);\r\n  \r\n        const messageBytes = [];\r\n        let messageLength = 0;\r\n        let messageEnd = false;\r\n  \r\n        for (let y = 0; y < canvas.height; y++) {\r\n          for (let x = 0; x < canvas.width; x++) {\r\n            const pixel = context.getImageData(x, y, 1, 1).data;\r\n  \r\n            if (!messageEnd) {\r\n              const red = pixel[0];\r\n              const green = pixel[1];\r\n              const blue = pixel[2];\r\n  \r\n              // Extract the least significant bits from the red, green, and blue channels\r\n              const char =\r\n                ((red & 0b00000001) << 7) |\r\n                ((green & 0b00000001) << 6) |\r\n                ((blue & 0b00000001) << 5);\r\n  \r\n              if (messageLength === 0) {\r\n                messageLength = char;\r\n              } else {\r\n                messageBytes.push(char);\r\n  \r\n                if (messageBytes.length === messageLength) {\r\n                  messageEnd = true;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n  \r\n          if (messageEnd) {\r\n            break;\r\n          }\r\n        }\r\n  \r\n        if (messageEnd) {\r\n          const originalMessage = messageBytes\r\n            .map((byte) => String.fromCharCode(byte))\r\n            .join('');\r\n          resolve(originalMessage);\r\n        } else {\r\n          reject(new Error('No message found in the image.'));\r\n        }\r\n      };\r\n  \r\n      image.onerror = function () {\r\n        reject(new Error('Failed to load image.'));\r\n      };\r\n  \r\n      image.src = modifiedImageURL;\r\n    });\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img); \r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n        const imageDataUrl = reader.result;\r\n        embedMessageInImage(imageDataUrl, \"hello\")\r\n    .then((modifiedImageURL) => {\r\n      console.log('Modified Image URL:', modifiedImageURL);\r\n      return decodeMessageFromImage(modifiedImageURL);\r\n    })\r\n    .then((originalMessage) => {\r\n      console.log('Original Message:', originalMessage);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n\r\n\r\n        }\r\n      reader.readAsDataURL(img);\r\n\r\n\r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  const handleChange=(e)=>{\r\n    setImg(e.target.files[0])\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}