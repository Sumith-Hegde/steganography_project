{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid'; // import Jimp from 'jimp'\n\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext); // const steganography = require('./steganogarphy');\n\n  function embedMessageInImage(imageURL, message) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.crossOrigin = 'Anonymous';\n\n      image.onload = function () {\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const binaryMessage = [...message].map(char => char.charCodeAt(0).toString(2).padStart(8, '0')).join('');\n        const messageLength = binaryMessage.length;\n\n        if (messageLength > image.width * image.height * 3) {\n          reject(new Error('Message is too long to be embedded in the image.'));\n          return;\n        }\n\n        let binaryIndex = 0;\n\n        for (let y = 0; y < image.height; y++) {\n          for (let x = 0; x < image.width; x++) {\n            const pixelData = context.getImageData(x, y, 1, 1).data;\n            const pixel = {\n              r: pixelData[0],\n              g: pixelData[1],\n              b: pixelData[2]\n            };\n            pixel.r = pixel.r & 0xfe | binaryMessage[binaryIndex++] >> 7;\n            pixel.g = pixel.g & 0xfe | binaryMessage[binaryIndex++] >> 6 & 0x01;\n            pixel.b = pixel.b & 0xfe | binaryMessage[binaryIndex++] >> 5 & 0x01;\n            context.fillStyle = `rgb(${pixel.r},${pixel.g},${pixel.b})`;\n            context.fillRect(x, y, 1, 1);\n\n            if (binaryIndex === messageLength) {\n              const modifiedImageURL = canvas.toDataURL('image/png');\n              resolve(modifiedImageURL);\n              return;\n            }\n          }\n        }\n\n        reject(new Error('Unable to embed the message in the image.'));\n      };\n\n      image.onerror = function () {\n        reject(new Error('Failed to load the image.'));\n      };\n\n      image.src = imageURL;\n    });\n  }\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const imageDataUrl = reader.result;\n        const newURL = embedMessage(imageDataUrl, \"hello\");\n        console.log(decodeMessage(newURL));\n      };\n\n      reader.readAsDataURL(img);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  const handleChange = e => {\n    setImg(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","embedMessageInImage","imageURL","message","Promise","resolve","reject","image","Image","crossOrigin","onload","canvas","document","createElement","width","height","context","getContext","drawImage","binaryMessage","map","char","charCodeAt","toString","padStart","join","messageLength","length","Error","binaryIndex","y","x","pixelData","getImageData","pixel","r","g","b","fillStyle","fillRect","modifiedImageURL","toDataURL","onerror","src","handleSend","storageRef","uploadTask","reader","FileReader","imageDataUrl","result","newURL","embedMessage","console","log","decodeMessage","readAsDataURL","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","handleChange","e","target","files","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState} from 'react'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\n// import Jimp from 'jimp'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n  // const steganography = require('./steganogarphy');\r\n  function embedMessageInImage(imageURL, message) {\r\n    return new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n      image.crossOrigin = 'Anonymous';\r\n  \r\n      image.onload = function () {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n  \r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0);\r\n  \r\n        const binaryMessage = [...message]\r\n          .map((char) => char.charCodeAt(0).toString(2).padStart(8, '0'))\r\n          .join('');\r\n  \r\n        const messageLength = binaryMessage.length;\r\n  \r\n        if (messageLength > image.width * image.height * 3) {\r\n          reject(new Error('Message is too long to be embedded in the image.'));\r\n          return;\r\n        }\r\n  \r\n        let binaryIndex = 0;\r\n  \r\n        for (let y = 0; y < image.height; y++) {\r\n          for (let x = 0; x < image.width; x++) {\r\n            const pixelData = context.getImageData(x, y, 1, 1).data;\r\n  \r\n            const pixel = {\r\n              r: pixelData[0],\r\n              g: pixelData[1],\r\n              b: pixelData[2],\r\n            };\r\n  \r\n            pixel.r = (pixel.r & 0xfe) | (binaryMessage[binaryIndex++] >> 7);\r\n            pixel.g = (pixel.g & 0xfe) | ((binaryMessage[binaryIndex++] >> 6) & 0x01);\r\n            pixel.b = (pixel.b & 0xfe) | ((binaryMessage[binaryIndex++] >> 5) & 0x01);\r\n  \r\n            context.fillStyle = `rgb(${pixel.r},${pixel.g},${pixel.b})`;\r\n            context.fillRect(x, y, 1, 1);\r\n  \r\n            if (binaryIndex === messageLength) {\r\n              const modifiedImageURL = canvas.toDataURL('image/png');\r\n              resolve(modifiedImageURL);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n  \r\n        reject(new Error('Unable to embed the message in the image.'));\r\n      };\r\n  \r\n      image.onerror = function () {\r\n        reject(new Error('Failed to load the image.'));\r\n      };\r\n  \r\n      image.src = imageURL;\r\n    });\r\n  }\r\n  \r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img); \r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n        const imageDataUrl = reader.result;\r\n        const newURL=embedMessage(imageDataUrl,\"hello\")\r\n          console.log(decodeMessage(newURL))\r\n\r\n        }\r\n      reader.readAsDataURL(img);\r\n\r\n\r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  const handleChange=(e)=>{\r\n    setImg(e.target.files[0])\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}