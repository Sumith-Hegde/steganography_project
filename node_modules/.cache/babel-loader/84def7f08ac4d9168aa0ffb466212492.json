{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useRef, useEffect } from 'react';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid'; // import Jimp from 'jimp'\n\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  function embedMessageInImage(imageURL, message) {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      const image = new Image();\n\n      image.onload = function () {\n        canvas.width = image.width;\n        canvas.height = image.height;\n        context.drawImage(image, 0, 0); // Convert the message to binary\n\n        const encoder = new TextEncoder();\n        const messageBytes = encoder.encode(message);\n        const binaryMessage = Array.from(messageBytes).map(byte => byte.toString(2).padStart(8, '0')).join(''); // Embed the message into the image pixel by pixel\n\n        let bitIndex = 0;\n\n        for (let y = 0; y < canvas.height; y++) {\n          for (let x = 0; x < canvas.width; x++) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n\n            if (bitIndex < binaryMessage.length) {\n              const bit = binaryMessage.charAt(bitIndex); // Set the least significant bit of each channel to the message bit\n\n              pixel[0] = pixel[0] & 0xfe | bit.charCodeAt(0) & 0x01;\n              pixel[1] = pixel[1] & 0xfe | bit.charCodeAt(0) & 0x01;\n              pixel[2] = pixel[2] & 0xfe | bit.charCodeAt(0) & 0x01;\n              context.fillStyle = `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]})`;\n              context.fillRect(x, y, 1, 1);\n              bitIndex++;\n            }\n          }\n        } // Convert the canvas image to data URL\n\n\n        const modifiedImageURL = canvas.toDataURL();\n        resolve(modifiedImageURL);\n      };\n\n      image.onerror = function () {\n        reject(new Error('Failed to load image.'));\n      };\n\n      image.src = imageURL;\n    });\n  }\n\n  function decodeMessageFromImage(modifiedImageURL) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.crossOrigin = 'anonymous'; // Allow cross-origin image loading\n\n      image.onload = function () {\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        let binaryMessage = '';\n        let bitIndex = 0;\n\n        for (let y = 0; y < canvas.height; y++) {\n          for (let x = 0; x < canvas.width; x++) {\n            const pixel = context.getImageData(x, y, 1, 1).data;\n\n            if (bitIndex < 8) {\n              const bit = (pixel[0] & 0x01).toString();\n              binaryMessage += bit;\n              bitIndex++;\n            }\n          }\n        }\n\n        const messageBytes = new Uint8Array(binaryMessage.length / 8);\n\n        for (let i = 0; i < binaryMessage.length; i += 8) {\n          const byte = parseInt(binaryMessage.substr(i, 8), 2);\n          messageBytes[i / 8] = byte;\n        } // Convert the message bytes to a string\n\n\n        const decoder = new TextDecoder();\n        const originalMessage = decoder.decode(messageBytes);\n        resolve(originalMessage);\n      };\n\n      image.onerror = function () {\n        reject(new Error('Failed to load image.'));\n      };\n\n      image.src = modifiedImageURL;\n    });\n  }\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const imageDataUrl = reader.result;\n        embedMessageInImage(imageDataUrl, \"hello\").then(modifiedImageURL => {\n          console.log('Modified Image URL:', modifiedImageURL);\n          return decodeMessageFromImage(modifiedImageURL);\n        }).then(originalMessage => {\n          console.log('Original Message:', originalMessage);\n        }).catch(error => {\n          console.error('Error:', error);\n        });\n      };\n\n      reader.readAsDataURL(img);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  const handleChange = e => {\n    setImg(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","useRef","useEffect","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","embedMessageInImage","imageURL","message","Promise","resolve","reject","canvas","document","createElement","context","getContext","image","Image","onload","width","height","drawImage","encoder","TextEncoder","messageBytes","encode","binaryMessage","Array","from","map","byte","toString","padStart","join","bitIndex","y","x","pixel","getImageData","length","bit","charAt","charCodeAt","fillStyle","fillRect","modifiedImageURL","toDataURL","onerror","Error","src","decodeMessageFromImage","crossOrigin","Uint8Array","i","parseInt","substr","decoder","TextDecoder","originalMessage","decode","handleSend","storageRef","uploadTask","reader","FileReader","imageDataUrl","result","then","console","log","catch","error","readAsDataURL","on","snapshot","downloadURL","chatId","messages","id","senderId","uid","date","now","user","handleChange","e","target","files","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef, useEffect } from 'react'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\n// import Jimp from 'jimp'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n\r\n\r\n  function embedMessageInImage(imageURL, message) {\r\n    return new Promise((resolve, reject) => {\r\n      const canvas = document.createElement('canvas');\r\n      const context = canvas.getContext('2d');\r\n      const image = new Image();\r\n  \r\n      image.onload = function() {\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n        context.drawImage(image, 0, 0);\r\n  \r\n        // Convert the message to binary\r\n        const encoder = new TextEncoder();\r\n        const messageBytes = encoder.encode(message);\r\n        const binaryMessage = Array.from(messageBytes)\r\n          .map(byte => byte.toString(2).padStart(8, '0')).join('');\r\n  \r\n        // Embed the message into the image pixel by pixel\r\n        let bitIndex = 0;\r\n        for (let y = 0; y < canvas.height; y++) {\r\n          for (let x = 0; x < canvas.width; x++) {\r\n            const pixel = context.getImageData(x, y, 1, 1).data;\r\n  \r\n            if (bitIndex < binaryMessage.length) {\r\n              const bit = binaryMessage.charAt(bitIndex);\r\n              // Set the least significant bit of each channel to the message bit\r\n              pixel[0] = (pixel[0] & 0xfe) | (bit.charCodeAt(0) & 0x01);\r\n              pixel[1] = (pixel[1] & 0xfe) | (bit.charCodeAt(0) & 0x01);\r\n              pixel[2] = (pixel[2] & 0xfe) | (bit.charCodeAt(0) & 0x01);\r\n              context.fillStyle = `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]})`;\r\n              context.fillRect(x, y, 1, 1);\r\n              bitIndex++;\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Convert the canvas image to data URL\r\n        const modifiedImageURL = canvas.toDataURL();\r\n        resolve(modifiedImageURL);\r\n      };\r\n  \r\n      image.onerror = function() {\r\n        reject(new Error('Failed to load image.'));\r\n      };\r\n  \r\n      image.src = imageURL;\r\n    });\r\n  }\r\n\r\n  function decodeMessageFromImage(modifiedImageURL) {\r\n    return new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n  \r\n      image.crossOrigin = 'anonymous'; // Allow cross-origin image loading\r\n  \r\n      image.onload = function() {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n  \r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0);\r\n  \r\n        let binaryMessage = '';\r\n        let bitIndex = 0;\r\n  \r\n        for (let y = 0; y < canvas.height; y++) {\r\n          for (let x = 0; x < canvas.width; x++) {\r\n            const pixel = context.getImageData(x, y, 1, 1).data;\r\n  \r\n            if (bitIndex < 8) {\r\n              const bit = (pixel[0] & 0x01).toString();\r\n              binaryMessage += bit;\r\n              bitIndex++;\r\n            }\r\n          }\r\n        }\r\n  \r\n        const messageBytes = new Uint8Array(binaryMessage.length / 8);\r\n        for (let i = 0; i < binaryMessage.length; i += 8) {\r\n          const byte = parseInt(binaryMessage.substr(i, 8), 2);\r\n          messageBytes[i / 8] = byte;\r\n        }\r\n  \r\n        // Convert the message bytes to a string\r\n        const decoder = new TextDecoder();\r\n        const originalMessage = decoder.decode(messageBytes);\r\n        resolve(originalMessage);\r\n      };\r\n  \r\n      image.onerror = function() {\r\n        reject(new Error('Failed to load image.'));\r\n      };\r\n  \r\n      image.src = modifiedImageURL;\r\n    });\r\n  }  \r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img); \r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n        const imageDataUrl = reader.result;\r\n        embedMessageInImage(imageDataUrl, \"hello\")\r\n    .then((modifiedImageURL) => {\r\n      console.log('Modified Image URL:', modifiedImageURL);\r\n      return decodeMessageFromImage(modifiedImageURL);\r\n    })\r\n    .then((originalMessage) => {\r\n      console.log('Original Message:', originalMessage);\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n\r\n\r\n        }\r\n      reader.readAsDataURL(img);\r\n\r\n\r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  const handleChange=(e)=>{\r\n    setImg(e.target.files[0])\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}