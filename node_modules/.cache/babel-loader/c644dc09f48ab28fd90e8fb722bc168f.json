{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid'; // import Jimp from 'jimp'\n\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext); // const steganography = require('./steganogarphy');\n\n  const util = require(\"util\");\n\n  const myImage = require(\"canvas\").Image;\n\n  const ImageEncoder = require(\"canvas\").ImageEncoder;\n\n  function embedMessage(imageURL, message) {\n    // Create a new canvas\n    const canvas = document.createElement(\"canvas\"); // Create a new image from the imageURL\n\n    const img = new myImage();\n    img.crossOrigin = \"anonymous\";\n    img.src = imageURL; // Set the width and height of the canvas to the same as the image\n\n    canvas.width = img.width;\n    canvas.height = img.height; // Create a 2D context for the canvas\n\n    const ctx = canvas.getContext(\"2d\"); // Draw the image onto the canvas\n\n    ctx.drawImage(img, 0, 0); // Convert the canvas to a data URL\n\n    const dataURL = canvas.toDataURL(\"image/png\"); // Split the dataURL into its components\n\n    const components = dataURL.split(\",\"); // Get the image data\n\n    const imageData = components[1]; // Convert the image data to a Uint8Array\n\n    const uint8Array = util.parseBinary(imageData); // Get the length of the message\n\n    const messageLength = message.length; // Iterate over the message characters\n\n    for (let i = 0; i < messageLength; i++) {\n      // Get the current character\n      const character = message[i]; // Convert the character to its ASCII code\n\n      const asciiCode = character.charCodeAt(0); // Update the image data with the ASCII code\n\n      uint8Array[i] = asciiCode;\n    } // Convert the Uint8Array back to a dataURL\n\n\n    const newDataURL = util.encodeBinary(uint8Array); // Return the new dataURL\n\n    return newDataURL;\n  }\n\n  function decodeMessage(dataURL) {\n    // Split the dataURL into its components\n    const components = dataURL.split(\",\"); // Get the image data\n\n    const imageData = components[1]; // Convert the image data to a Uint8Array\n\n    const uint8Array = util.parseBinary(imageData); // Get the length of the message\n\n    const messageLength = uint8Array.length; // Create a new string to store the message\n\n    let message = \"\"; // Iterate over the image data\n\n    for (let i = 0; i < messageLength; i++) {\n      // Get the current byte\n      const byte = uint8Array[i]; // Convert the byte to its ASCII character\n\n      const character = String.fromCharCode(byte); // Append the character to the message\n\n      message += character;\n    } // Return the message\n\n\n    return message;\n  }\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const imageDataUrl = reader.result;\n        const newURL = embedMessage(imageDataUrl, \"hello\");\n        console.log(decodeMessage(newURL));\n      };\n\n      reader.readAsDataURL(img);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  const handleChange = e => {\n    setImg(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","util","require","myImage","Image","ImageEncoder","embedMessage","imageURL","message","canvas","document","createElement","crossOrigin","src","width","height","ctx","getContext","drawImage","dataURL","toDataURL","components","split","imageData","uint8Array","parseBinary","messageLength","length","i","character","asciiCode","charCodeAt","newDataURL","encodeBinary","decodeMessage","byte","String","fromCharCode","handleSend","storageRef","uploadTask","reader","FileReader","onload","imageDataUrl","result","newURL","console","log","readAsDataURL","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","handleChange","e","target","files","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState} from 'react'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\n// import Jimp from 'jimp'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n  // const steganography = require('./steganogarphy');\r\n  const util = require(\"util\");\r\n  const myImage = require(\"canvas\").Image;\r\nconst ImageEncoder = require(\"canvas\").ImageEncoder;\r\n\r\nfunction embedMessage(imageURL, message) {\r\n  // Create a new canvas\r\n  const canvas = document.createElement(\"canvas\");\r\n  // Create a new image from the imageURL\r\n  const img = new myImage();\r\n  img.crossOrigin = \"anonymous\";\r\n  img.src = imageURL;\r\n  // Set the width and height of the canvas to the same as the image\r\n  canvas.width = img.width;\r\n  canvas.height = img.height;\r\n  // Create a 2D context for the canvas\r\n  const ctx = canvas.getContext(\"2d\");\r\n  // Draw the image onto the canvas\r\n  ctx.drawImage(img, 0, 0);\r\n  // Convert the canvas to a data URL\r\n  const dataURL = canvas.toDataURL(\"image/png\");\r\n  // Split the dataURL into its components\r\n  const components = dataURL.split(\",\");\r\n  // Get the image data\r\n  const imageData = components[1];\r\n  // Convert the image data to a Uint8Array\r\n  const uint8Array = util.parseBinary(imageData);\r\n  // Get the length of the message\r\n  const messageLength = message.length;\r\n  // Iterate over the message characters\r\n  for (let i = 0; i < messageLength; i++) {\r\n    // Get the current character\r\n    const character = message[i];\r\n    // Convert the character to its ASCII code\r\n    const asciiCode = character.charCodeAt(0);\r\n    // Update the image data with the ASCII code\r\n    uint8Array[i] = asciiCode;\r\n  }\r\n  // Convert the Uint8Array back to a dataURL\r\n  const newDataURL = util.encodeBinary(uint8Array);\r\n  // Return the new dataURL\r\n  return newDataURL;\r\n}\r\n\r\nfunction decodeMessage(dataURL) {\r\n  // Split the dataURL into its components\r\n  const components = dataURL.split(\",\");\r\n  // Get the image data\r\n  const imageData = components[1];\r\n  // Convert the image data to a Uint8Array\r\n  const uint8Array = util.parseBinary(imageData);\r\n  // Get the length of the message\r\n  const messageLength = uint8Array.length;\r\n  // Create a new string to store the message\r\n  let message = \"\";\r\n  // Iterate over the image data\r\n  for (let i = 0; i < messageLength; i++) {\r\n    // Get the current byte\r\n    const byte = uint8Array[i];\r\n    // Convert the byte to its ASCII character\r\n    const character = String.fromCharCode(byte);\r\n    // Append the character to the message\r\n    message += character;\r\n  }\r\n  // Return the message\r\n  return message;\r\n}\r\n\r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img); \r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n        const imageDataUrl = reader.result;\r\n        const newURL=embedMessage(imageDataUrl,\"hello\")\r\n          console.log(decodeMessage(newURL))\r\n\r\n        }\r\n      reader.readAsDataURL(img);\r\n\r\n\r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  const handleChange=(e)=>{\r\n    setImg(e.target.files[0])\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}