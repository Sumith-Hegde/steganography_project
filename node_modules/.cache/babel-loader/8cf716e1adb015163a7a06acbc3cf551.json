{"ast":null,"code":"// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n'use strict';\n\nconst platformAndArch = require('./platform')();\n/* istanbul ignore next */\n\n\ntry {\n  module.exports = require(`../build/Release/sharp-${platformAndArch}.node`);\n} catch (err) {\n  // Bail early if bindings aren't available\n  const help = ['', 'Something went wrong installing the \"sharp\" module', '', err.message, '', 'Possible solutions:'];\n\n  if (/dylib/.test(err.message) && /Incompatible library version/.test(err.message)) {\n    help.push('- Update Homebrew: \"brew update && brew upgrade vips\"');\n  } else {\n    const [platform, arch] = platformAndArch.split('-');\n\n    if (platform === 'linux' && /Module did not self-register/.test(err.message)) {\n      help.push('- Using worker threads? See https://sharp.pixelplumbing.com/install#worker-threads');\n    }\n\n    help.push('- Install with verbose logging and look for errors: \"npm install --ignore-scripts=false --foreground-scripts --verbose sharp\"', `- Install for the current ${platformAndArch} runtime: \"npm install --platform=${platform} --arch=${arch} sharp\"`);\n  }\n\n  help.push('- Consult the installation documentation: https://sharp.pixelplumbing.com/install'); // Check loaded\n\n  if (process.platform === 'win32' || /symbol/.test(err.message)) {\n    const loadedModule = Object.keys(require.cache).find(i => /[\\\\/]build[\\\\/]Release[\\\\/]sharp(.*)\\.node$/.test(i));\n\n    if (loadedModule) {\n      const [, loadedPackage] = loadedModule.match(/node_modules[\\\\/]([^\\\\/]+)[\\\\/]/);\n      help.push(`- Ensure the version of sharp aligns with the ${loadedPackage} package: \"npm ls sharp\"`);\n    }\n  }\n\n  throw new Error(help.join('\\n'));\n}","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/node_modules/sharp/lib/sharp.js"],"names":["platformAndArch","require","module","exports","err","help","message","test","push","platform","arch","split","process","loadedModule","Object","keys","cache","find","i","loadedPackage","match","Error","join"],"mappings":"AAAA;AACA;AAEA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,YAAD,CAAP,EAAxB;AAEA;;;AACA,IAAI;AACFC,EAAAA,MAAM,CAACC,OAAP,GAAiBF,OAAO,CAAE,0BAAyBD,eAAgB,OAA3C,CAAxB;AACD,CAFD,CAEE,OAAOI,GAAP,EAAY;AACZ;AACA,QAAMC,IAAI,GAAG,CAAC,EAAD,EAAK,oDAAL,EAA2D,EAA3D,EAA+DD,GAAG,CAACE,OAAnE,EAA4E,EAA5E,EAAgF,qBAAhF,CAAb;;AACA,MAAI,QAAQC,IAAR,CAAaH,GAAG,CAACE,OAAjB,KAA6B,+BAA+BC,IAA/B,CAAoCH,GAAG,CAACE,OAAxC,CAAjC,EAAmF;AACjFD,IAAAA,IAAI,CAACG,IAAL,CAAU,uDAAV;AACD,GAFD,MAEO;AACL,UAAM,CAACC,QAAD,EAAWC,IAAX,IAAmBV,eAAe,CAACW,KAAhB,CAAsB,GAAtB,CAAzB;;AACA,QAAIF,QAAQ,KAAK,OAAb,IAAwB,+BAA+BF,IAA/B,CAAoCH,GAAG,CAACE,OAAxC,CAA5B,EAA8E;AAC5ED,MAAAA,IAAI,CAACG,IAAL,CAAU,oFAAV;AACD;;AACDH,IAAAA,IAAI,CAACG,IAAL,CACE,+HADF,EAEG,6BAA4BR,eAAgB,qCAAoCS,QAAS,WAAUC,IAAK,SAF3G;AAID;;AACDL,EAAAA,IAAI,CAACG,IAAL,CACE,mFADF,EAfY,CAkBZ;;AACA,MAAII,OAAO,CAACH,QAAR,KAAqB,OAArB,IAAgC,SAASF,IAAT,CAAcH,GAAG,CAACE,OAAlB,CAApC,EAAgE;AAC9D,UAAMO,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYd,OAAO,CAACe,KAApB,EAA2BC,IAA3B,CAAiCC,CAAD,IAAO,8CAA8CX,IAA9C,CAAmDW,CAAnD,CAAvC,CAArB;;AACA,QAAIL,YAAJ,EAAkB;AAChB,YAAM,GAAGM,aAAH,IAAoBN,YAAY,CAACO,KAAb,CAAmB,iCAAnB,CAA1B;AACAf,MAAAA,IAAI,CAACG,IAAL,CAAW,iDAAgDW,aAAc,0BAAzE;AACD;AACF;;AACD,QAAM,IAAIE,KAAJ,CAAUhB,IAAI,CAACiB,IAAL,CAAU,IAAV,CAAV,CAAN;AACD","sourcesContent":["// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst platformAndArch = require('./platform')();\n\n/* istanbul ignore next */\ntry {\n  module.exports = require(`../build/Release/sharp-${platformAndArch}.node`);\n} catch (err) {\n  // Bail early if bindings aren't available\n  const help = ['', 'Something went wrong installing the \"sharp\" module', '', err.message, '', 'Possible solutions:'];\n  if (/dylib/.test(err.message) && /Incompatible library version/.test(err.message)) {\n    help.push('- Update Homebrew: \"brew update && brew upgrade vips\"');\n  } else {\n    const [platform, arch] = platformAndArch.split('-');\n    if (platform === 'linux' && /Module did not self-register/.test(err.message)) {\n      help.push('- Using worker threads? See https://sharp.pixelplumbing.com/install#worker-threads');\n    }\n    help.push(\n      '- Install with verbose logging and look for errors: \"npm install --ignore-scripts=false --foreground-scripts --verbose sharp\"',\n      `- Install for the current ${platformAndArch} runtime: \"npm install --platform=${platform} --arch=${arch} sharp\"`\n    );\n  }\n  help.push(\n    '- Consult the installation documentation: https://sharp.pixelplumbing.com/install'\n  );\n  // Check loaded\n  if (process.platform === 'win32' || /symbol/.test(err.message)) {\n    const loadedModule = Object.keys(require.cache).find((i) => /[\\\\/]build[\\\\/]Release[\\\\/]sharp(.*)\\.node$/.test(i));\n    if (loadedModule) {\n      const [, loadedPackage] = loadedModule.match(/node_modules[\\\\/]([^\\\\/]+)[\\\\/]/);\n      help.push(`- Ensure the version of sharp aligns with the ${loadedPackage} package: \"npm ls sharp\"`);\n    }\n  }\n  throw new Error(help.join('\\n'));\n}\n"]},"metadata":{},"sourceType":"script"}