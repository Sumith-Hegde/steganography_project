{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid';\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  const Jimp = require('jimp');\n\n  const Blowfish = require('blowfish');\n\n  const key = 'This is a sample key';\n  const iv = 'This is a sample IV!';\n  const blowfish = new Blowfish(key, 'cbc', iv);\n\n  const encodeMessage = (img, message, delimiter) => {\n    const image = Jimp.read(img); // Convert the message to binary\n\n    const binaryMessage = message.split('').map(char => char.charCodeAt(0).toString(2).padStart(8, '0')).join(''); // Add the delimiter to the end of the binary message\n\n    const binaryMessageWithDelimiter = binaryMessage + delimiter; // Read the original image using Jimp\n    // Get the dimensions of the image\n\n    const width = image.bitmap.width;\n    const height = image.bitmap.height;\n    let binaryMessageIndex = 0;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        // Get the RGB values of the current pixel\n        const rgba = Jimp.intToRGBA(image.getPixelColor(x, y));\n        let binaryR = rgba.r.toString(2).padStart(8, '0');\n        let binaryG = rgba.g.toString(2).padStart(8, '0');\n        let binaryB = rgba.b.toString(2).padStart(8, '0'); // Modify the least significant bit of each RGB channel to encode the message\n\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\n          binaryR = binaryR.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\n        }\n\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\n          binaryG = binaryG.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\n        }\n\n        if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\n          binaryB = binaryB.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\n        } // Update the pixel with the modified RGB values\n\n\n        const modifiedColor = Jimp.rgbaToInt(parseInt(binaryR, 2), parseInt(binaryG, 2), parseInt(binaryB, 2), rgba.a);\n        image.setPixelColor(modifiedColor, x, y);\n      }\n    } // Save the encoded image\n    // const encodedImagePath = imagePath.replace('.png', '_encoded.png');\n\n\n    const encodedImagePath = 'output.png';\n    image.write(encodedImagePath, () => {\n      console.log('Message encoded successfully. Encoded image saved at:', encodedImagePath);\n    });\n  };\n\n  const handleSend = async () => {\n    if (img) {\n      try {\n        await encodeMessage(img, \"hello\", \"000000000\");\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {// setErr(true);\n        }, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", data.chatId), {\n              messages: arrayUnion({\n                id: uuid(),\n                text,\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL\n              })\n            });\n          });\n        });\n      } catch (error) {\n        console.error('Error reading the image:', error);\n      }\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: e => setImg(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","at","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","Jimp","require","Blowfish","key","iv","blowfish","encodeMessage","message","delimiter","image","read","binaryMessage","split","map","char","charCodeAt","toString","padStart","join","binaryMessageWithDelimiter","width","bitmap","height","binaryMessageIndex","y","x","rgba","intToRGBA","getPixelColor","binaryR","r","binaryG","g","binaryB","b","length","slice","modifiedColor","rgbaToInt","parseInt","a","setPixelColor","encodedImagePath","write","console","log","handleSend","storageRef","uploadTask","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","e","target","value","display","files"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAe,iFAAf;AACA,OAAOC,EAAP,MAAe,iFAAf;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,eAArC,EAAsDC,SAAtD,QAAuE,oBAAvE;AACA,SAASC,EAAT,EAAaC,OAAb,QAA4B,aAA5B;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,SAASC,cAAT,EAAyBC,GAAzB,EAA8BC,oBAA9B,QAA0D,kBAA1D;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAenB,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAM,CAACoB,GAAD,EAAKC,MAAL,IAAarB,QAAQ,CAAC,IAAD,CAA3B;AACA,QAAM;AAACsB,IAAAA;AAAD,MAAcvB,UAAU,CAACI,WAAD,CAA9B;AACA,QAAM;AAACoB,IAAAA;AAAD,MAAOxB,UAAU,CAACK,WAAD,CAAvB;;AAEF,QAAMoB,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAEA,QAAME,GAAG,GAAG,sBAAZ;AACA,QAAMC,EAAE,GAAG,sBAAX;AACA,QAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAaC,GAAb,EAAkB,KAAlB,EAAyBC,EAAzB,CAAjB;;AAEE,QAAME,aAAa,GAAG,CAACV,GAAD,EAAMW,OAAN,EAAeC,SAAf,KAA6B;AACjD,UAAMC,KAAK,GAAGT,IAAI,CAACU,IAAL,CAAUd,GAAV,CAAd,CADiD,CAEjD;;AACA,UAAMe,aAAa,GAAGJ,OAAO,CAACK,KAAR,CAAc,EAAd,EACnBC,GADmB,CACfC,IAAI,IAAIA,IAAI,CAACC,UAAL,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4B,CAA5B,EAA+BC,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CADO,EAEnBC,IAFmB,CAEd,EAFc,CAAtB,CAHiD,CAOjD;;AACA,UAAMC,0BAA0B,GAAGR,aAAa,GAAGH,SAAnD,CARiD,CAUjD;AACI;;AACA,UAAMY,KAAK,GAAGX,KAAK,CAACY,MAAN,CAAaD,KAA3B;AACA,UAAME,MAAM,GAAGb,KAAK,CAACY,MAAN,CAAaC,MAA5B;AAEA,QAAIC,kBAAkB,GAAG,CAAzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9B;AACA,cAAMC,IAAI,GAAG1B,IAAI,CAAC2B,SAAL,CAAelB,KAAK,CAACmB,aAAN,CAAoBH,CAApB,EAAuBD,CAAvB,CAAf,CAAb;AACA,YAAIK,OAAO,GAAGH,IAAI,CAACI,CAAL,CAAOd,QAAP,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAd;AACA,YAAIc,OAAO,GAAGL,IAAI,CAACM,CAAL,CAAOhB,QAAP,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAd;AACA,YAAIgB,OAAO,GAAGP,IAAI,CAACQ,CAAL,CAAOlB,QAAP,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAAd,CAL8B,CAO9B;;AACA,YAAIM,kBAAkB,GAAGJ,0BAA0B,CAACgB,MAApD,EAA4D;AAC1DN,UAAAA,OAAO,GAAGA,OAAO,CAACO,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,IAAuBjB,0BAA0B,CAACI,kBAAkB,EAAnB,CAA3D;AACD;;AACD,YAAIA,kBAAkB,GAAGJ,0BAA0B,CAACgB,MAApD,EAA4D;AAC1DJ,UAAAA,OAAO,GAAGA,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,IAAuBjB,0BAA0B,CAACI,kBAAkB,EAAnB,CAA3D;AACD;;AACD,YAAIA,kBAAkB,GAAGJ,0BAA0B,CAACgB,MAApD,EAA4D;AAC1DF,UAAAA,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,IAAuBjB,0BAA0B,CAACI,kBAAkB,EAAnB,CAA3D;AACD,SAhB6B,CAkB9B;;;AACA,cAAMc,aAAa,GAAGrC,IAAI,CAACsC,SAAL,CACpBC,QAAQ,CAACV,OAAD,EAAU,CAAV,CADY,EAEpBU,QAAQ,CAACR,OAAD,EAAU,CAAV,CAFY,EAGpBQ,QAAQ,CAACN,OAAD,EAAU,CAAV,CAHY,EAIpBP,IAAI,CAACc,CAJe,CAAtB;AAMA/B,QAAAA,KAAK,CAACgC,aAAN,CAAoBJ,aAApB,EAAmCZ,CAAnC,EAAsCD,CAAtC;AACD;AACF,KA5C4C,CA8C7C;AACA;;;AAEA,UAAMkB,gBAAgB,GAAG,YAAzB;AACAjC,IAAAA,KAAK,CAACkC,KAAN,CAAYD,gBAAZ,EAA8B,MAAM;AAClCE,MAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqEH,gBAArE;AACD,KAFD;AAGL,GArDD;;AAuDA,QAAMI,UAAU,GAAC,YAAS;AACxB,QAAGlD,GAAH,EAAO;AACL,UAAI;AACF,cAAMU,aAAa,CAACV,GAAD,EAAM,OAAN,EAAe,WAAf,CAAnB;AACA,cAAMmD,UAAU,GAAGxD,GAAG,CAACJ,OAAD,EAAUE,IAAI,EAAd,CAAtB;AAEA,cAAM2D,UAAU,GAAGxD,oBAAoB,CAACuD,UAAD,EAAanD,GAAb,CAAvC;AAEAoD,QAAAA,UAAU,CAACC,EAAX,CACGC,KAAD,IAAW,CACT;AACD,SAHH,EAIE,MAAM;AACJ5D,UAAAA,cAAc,CAAC0D,UAAU,CAACG,QAAX,CAAoB5D,GAArB,CAAd,CAAwC6D,IAAxC,CAA6C,MAAOC,WAAP,IAAuB;AAClE,kBAAMpE,SAAS,CAACF,GAAG,CAACG,EAAD,EAAK,OAAL,EAAca,IAAI,CAACuD,MAAnB,CAAJ,EAAgC;AAC7CC,cAAAA,QAAQ,EAAEzE,UAAU,CAAC;AACnB0E,gBAAAA,EAAE,EAAEnE,IAAI,EADW;AAEnBK,gBAAAA,IAFmB;AAGnB+D,gBAAAA,QAAQ,EAAE3D,WAAW,CAAC4D,GAHH;AAInBC,gBAAAA,IAAI,EAAE9E,SAAS,CAAC+E,GAAV,EAJa;AAKnBhE,gBAAAA,GAAG,EAAEyD;AALc,eAAD;AADyB,aAAhC,CAAf;AASD,WAVD;AAWD,SAhBH;AAkBD,OAxBD,CAwBE,OAAOH,KAAP,EAAc;AACdN,QAAAA,OAAO,CAACM,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACD;AACF,KA5BD,MA4BM;AACJ,YAAMjE,SAAS,CAACF,GAAG,CAACG,EAAD,EAAI,OAAJ,EAAYa,IAAI,CAACuD,MAAjB,CAAJ,EAA6B;AAC1CC,QAAAA,QAAQ,EAACzE,UAAU,CAAC;AAClB0E,UAAAA,EAAE,EAACnE,IAAI,EADW;AAElBK,UAAAA,IAFkB;AAGlB+D,UAAAA,QAAQ,EAAC3D,WAAW,CAAC4D,GAHH;AAIlBC,UAAAA,IAAI,EAAC9E,SAAS,CAAC+E,GAAV;AAJa,SAAD;AADuB,OAA7B,CAAf;AAQD;;AACD,UAAM3E,SAAS,CAACF,GAAG,CAACG,EAAD,EAAI,WAAJ,EAAgBY,WAAW,CAAC4D,GAA5B,CAAJ,EAAqC;AAClD,OAAC3D,IAAI,CAACuD,MAAL,GAAY,cAAb,GAA6B;AAC3B5D,QAAAA;AAD2B,OADqB;AAIlD,OAACK,IAAI,CAACuD,MAAL,GAAY,OAAb,GAAsBtE,eAAe;AAJa,KAArC,CAAf;AAMA,UAAMC,SAAS,CAACF,GAAG,CAACG,EAAD,EAAI,WAAJ,EAAgBa,IAAI,CAAC8D,IAAL,CAAUH,GAA1B,CAAJ,EAAmC;AAChD,OAAC3D,IAAI,CAACuD,MAAL,GAAY,cAAb,GAA6B;AAC3B5D,QAAAA;AAD2B,OADmB;AAIhD,OAACK,IAAI,CAACuD,MAAL,GAAY,OAAb,GAAsBtE,eAAe;AAJW,KAAnC,CAAf;AAOAW,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAtDD;;AAuDA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,WAAW,EAAC,SAA/B;AAAyC,MAAA,QAAQ,EAAEiE,CAAC,IAAEnE,OAAO,CAACmE,CAAC,CAACC,MAAF,CAASC,KAAV,CAA7D;AAA+E,MAAA,KAAK,EAAEtE;AAAtF;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE;AAACuE,UAAAA,OAAO,EAAC;AAAT,SAA1B;AAA4C,QAAA,EAAE,EAAC,MAA/C;AAAsD,QAAA,QAAQ,EAAEH,CAAC,IAAEjE,MAAM,CAACiE,CAAC,CAACC,MAAF,CAASG,KAAT,CAAe,CAAf,CAAD;AAAzE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,GAAG,EAAExF,EAAV;AAAc,UAAA,GAAG,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF,eAME;AAAQ,QAAA,OAAO,EAAEoE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAxID;;GAAMrD,K;;KAAAA,K;AAyIN,eAAeA,KAAf","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n\r\nconst Jimp = require('jimp');\r\nconst Blowfish = require('blowfish');\r\n\r\nconst key = 'This is a sample key';\r\nconst iv = 'This is a sample IV!';\r\nconst blowfish = new Blowfish(key, 'cbc', iv);\r\n\r\n  const encodeMessage = (img, message, delimiter) => {\r\n    const image = Jimp.read(img);\r\n    // Convert the message to binary\r\n    const binaryMessage = message.split('')\r\n      .map(char => char.charCodeAt(0).toString(2).padStart(8, '0'))\r\n      .join('');\r\n  \r\n    // Add the delimiter to the end of the binary message\r\n    const binaryMessageWithDelimiter = binaryMessage + delimiter;\r\n  \r\n    // Read the original image using Jimp\r\n        // Get the dimensions of the image\r\n        const width = image.bitmap.width;\r\n        const height = image.bitmap.height;\r\n  \r\n        let binaryMessageIndex = 0;\r\n        for (let y = 0; y < height; y++) {\r\n          for (let x = 0; x < width; x++) {\r\n            // Get the RGB values of the current pixel\r\n            const rgba = Jimp.intToRGBA(image.getPixelColor(x, y));\r\n            let binaryR = rgba.r.toString(2).padStart(8, '0');\r\n            let binaryG = rgba.g.toString(2).padStart(8, '0');\r\n            let binaryB = rgba.b.toString(2).padStart(8, '0');\r\n  \r\n            // Modify the least significant bit of each RGB channel to encode the message\r\n            if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\r\n              binaryR = binaryR.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\r\n            }\r\n            if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\r\n              binaryG = binaryG.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\r\n            }\r\n            if (binaryMessageIndex < binaryMessageWithDelimiter.length) {\r\n              binaryB = binaryB.slice(0, -1) + binaryMessageWithDelimiter[binaryMessageIndex++];\r\n            }\r\n  \r\n            // Update the pixel with the modified RGB values\r\n            const modifiedColor = Jimp.rgbaToInt(\r\n              parseInt(binaryR, 2),\r\n              parseInt(binaryG, 2),\r\n              parseInt(binaryB, 2),\r\n              rgba.a\r\n            );\r\n            image.setPixelColor(modifiedColor, x, y);\r\n          }\r\n        }\r\n  \r\n        // Save the encoded image\r\n        // const encodedImagePath = imagePath.replace('.png', '_encoded.png');\r\n\r\n        const encodedImagePath = 'output.png';\r\n        image.write(encodedImagePath, () => {\r\n          console.log('Message encoded successfully. Encoded image saved at:', encodedImagePath);\r\n        });\r\n  };\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n      try {\r\n        await encodeMessage(img, \"hello\", \"000000000\");\r\n        const storageRef = ref(storage, uuid());\r\n  \r\n        const uploadTask = uploadBytesResumable(storageRef, img);\r\n  \r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n      } catch (error) {\r\n        console.error('Error reading the image:', error);\r\n      }\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        {/* <img src={at} alt=\"\" /> */}\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={e=>setImg(e.target.files[0])}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}