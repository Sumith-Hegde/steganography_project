{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid';\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext); // const [path,setPath]=useState(\"\")\n\n  const Jimp = require('jimp');\n\n  const encodeMessage = (image, message) => {\n    const width = image.width;\n    const height = image.height;\n    const binaryMessage = message.split('').map(char => char.charCodeAt(0).toString(2).padStart(8, '0')).join(''); // Add the delimiter to the binary message\n\n    const binaryMessageWithDelimiter = binaryMessage + '0000000000';\n    const modifiedImage = image;\n    let bitIndex = 0;\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const rgba = Jimp.intToRGBA(image.getPixelColor(x, y));\n        const binaryR = rgba.r.toString(2).padStart(8, '0');\n        const binaryG = rgba.g.toString(2).padStart(8, '0');\n        const binaryB = rgba.b.toString(2).padStart(8, '0');\n        const modifiedR = binaryR.slice(0, 7) + binaryMessageWithDelimiter[bitIndex];\n        const modifiedG = binaryG.slice(0, 7) + binaryMessageWithDelimiter[bitIndex + 1];\n        const modifiedB = binaryB.slice(0, 7) + binaryMessageWithDelimiter[bitIndex + 2];\n        const modifiedColor = Jimp.rgbaToInt(parseInt(modifiedR, 2), parseInt(modifiedG, 2), parseInt(modifiedB, 2), rgba.a);\n        modifiedImage.setPixelColor(modifiedColor, x, y);\n        bitIndex = (bitIndex + 3) % binaryMessageWithDelimiter.length;\n      }\n    }\n\n    setImg(modifiedImage); // const encodedImagePath = 'output.png';\n    // image.write(encodedImagePath, () => {\n    //   console.log('Message encoded successfully. Encoded image saved at:', encodedImagePath);\n    // });\n  };\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      console.log(typeof img);\n      encodeMessage(img, \"hello\");\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n          const link = document.createElement('a');\n          link.href = downloadURL;\n          link.download = 'qrcode.png';\n          link.click();\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  const handleChange = e => {\n    setImg(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","Jimp","require","encodeMessage","image","message","width","height","binaryMessage","split","map","char","charCodeAt","toString","padStart","join","binaryMessageWithDelimiter","modifiedImage","bitIndex","y","x","rgba","intToRGBA","getPixelColor","binaryR","r","binaryG","g","binaryB","b","modifiedR","slice","modifiedG","modifiedB","modifiedColor","rgbaToInt","parseInt","a","setPixelColor","length","handleSend","storageRef","uploadTask","console","log","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","link","document","createElement","href","download","click","user","handleChange","e","target","files","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n  // const [path,setPath]=useState(\"\")\r\n\r\nconst Jimp = require('jimp');\r\n\r\nconst encodeMessage = (image, message) => {\r\n\r\n      \r\n      const width = image.width;\r\n      const height = image.height;\r\n\r\n      const binaryMessage = message\r\n        .split('')\r\n        .map(char => char.charCodeAt(0).toString(2).padStart(8, '0'))\r\n        .join('');\r\n\r\n      // Add the delimiter to the binary message\r\n      const binaryMessageWithDelimiter = binaryMessage + '0000000000';\r\n      \r\n      const modifiedImage=image;\r\n      let bitIndex = 0;\r\n      for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n          const rgba = Jimp.intToRGBA(image.getPixelColor(x, y));\r\n          const binaryR = rgba.r.toString(2).padStart(8, '0');\r\n          const binaryG = rgba.g.toString(2).padStart(8, '0');\r\n          const binaryB = rgba.b.toString(2).padStart(8, '0');\r\n          \r\n          const modifiedR = binaryR.slice(0, 7) + binaryMessageWithDelimiter[bitIndex];\r\n          const modifiedG = binaryG.slice(0, 7) + binaryMessageWithDelimiter[bitIndex + 1];\r\n          const modifiedB = binaryB.slice(0, 7) + binaryMessageWithDelimiter[bitIndex + 2];\r\n\r\n          const modifiedColor = Jimp.rgbaToInt(\r\n            parseInt(modifiedR, 2),\r\n            parseInt(modifiedG, 2),\r\n            parseInt(modifiedB, 2),\r\n            rgba.a\r\n            );\r\n            modifiedImage.setPixelColor(modifiedColor, x, y);\r\n            \r\n            bitIndex = (bitIndex + 3) % binaryMessageWithDelimiter.length;\r\n          }\r\n        }\r\n        setImg(modifiedImage)\r\n\r\n\r\n      // const encodedImagePath = 'output.png';\r\n      // image.write(encodedImagePath, () => {\r\n      //   console.log('Message encoded successfully. Encoded image saved at:', encodedImagePath);\r\n      // });\r\n      \r\n};\r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img);\r\n\r\n\r\n        console.log(typeof(img));\r\n        encodeMessage(img,\"hello\");\r\n  \r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n          const link = document.createElement('a');\r\n        link.href = downloadURL;\r\n        link.download = 'qrcode.png';\r\n        link.click();\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  const handleChange=(e)=>{\r\n    setImg(e.target.files[0])\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}