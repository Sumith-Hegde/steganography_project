{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid'; // import Jimp from 'jimp'\n\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  const fs = require('fs');\n\n  const img1 = require('image-size');\n\n  const stego = require('stegano');\n\n  function embedMessage(imageURL, message) {\n    // Load the image from the URL.\n    const imgData = fs.readFileSync(imageURL); // Get the size of the image.\n\n    const {\n      width,\n      height\n    } = img1(imgData); // Create a new image object with the same size as the original image.\n\n    const newImage = new Image();\n    newImage.width = width;\n    newImage.height = height; // Embed the message into the image.\n\n    stego.embed(newImage, message); // Save the modified image to a file.\n\n    const newImageURL = `./output.png`;\n    fs.writeFileSync(newImageURL, newImage); // Return the URL of the modified image.\n\n    return newImageURL;\n  }\n\n  function decodeMessage(imageURL) {\n    // Load the image from the URL.\n    const imgData = fs.readFileSync(imageURL); // Get the size of the image.\n\n    const {\n      width,\n      height\n    } = img1(imgData); // Create a new image object with the same size as the original image.\n\n    const newImage = new Image();\n    newImage.width = width;\n    newImage.height = height; // Decode the message from the image.\n\n    const message = stego.decode(newImage); // Return the message.\n\n    return message;\n  }\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      const reader = new FileReader();\n\n      reader.onload = async () => {\n        const imageDataUrl = reader.result;\n        const newURL = embedMessage(imageDataUrl, \"hello\");\n        console.log(decodeMessage(newURL));\n      };\n\n      reader.readAsDataURL(img);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  const handleChange = e => {\n    setImg(e.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","data","fs","require","img1","stego","embedMessage","imageURL","message","imgData","readFileSync","width","height","newImage","Image","embed","newImageURL","writeFileSync","decodeMessage","decode","handleSend","storageRef","uploadTask","reader","FileReader","onload","imageDataUrl","result","newURL","console","log","readAsDataURL","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","handleChange","e","target","files","value","display"],"mappings":"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","sourcesContent":["import React, { useContext, useState} from 'react'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\n// import Jimp from 'jimp'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n\r\n\r\n  \r\n  const fs = require('fs');\r\n  const img1 = require('image-size');\r\n  const stego = require('stegano');\r\n  \r\n  function embedMessage(imageURL, message) {\r\n    // Load the image from the URL.\r\n    const imgData = fs.readFileSync(imageURL);\r\n  \r\n    // Get the size of the image.\r\n    const { width, height } = img1(imgData);\r\n  \r\n    // Create a new image object with the same size as the original image.\r\n    const newImage = new Image();\r\n    newImage.width = width;\r\n    newImage.height = height;\r\n  \r\n    // Embed the message into the image.\r\n    stego.embed(newImage, message);\r\n  \r\n    // Save the modified image to a file.\r\n    const newImageURL = `./output.png`;\r\n    fs.writeFileSync(newImageURL, newImage);\r\n  \r\n    // Return the URL of the modified image.\r\n    return newImageURL;\r\n  }\r\n  \r\n  function decodeMessage(imageURL) {\r\n    // Load the image from the URL.\r\n    const imgData = fs.readFileSync(imageURL);\r\n  \r\n    // Get the size of the image.\r\n    const { width, height } = img1(imgData);\r\n  \r\n    // Create a new image object with the same size as the original image.\r\n    const newImage = new Image();\r\n    newImage.width = width;\r\n    newImage.height = height;\r\n  \r\n    // Decode the message from the image.\r\n    const message = stego.decode(newImage);\r\n  \r\n    // Return the message.\r\n    return message;\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img); \r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n        const imageDataUrl = reader.result;\r\n        const newURL=embedMessage(imageDataUrl,\"hello\")\r\n          console.log(decodeMessage(newURL))\r\n\r\n        }\r\n      reader.readAsDataURL(img);\r\n\r\n\r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  const handleChange=(e)=>{\r\n    setImg(e.target.files[0])\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        <input type=\"file\" style={{display:'none'}} id='file' onChange={handleChange}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}