{"ast":null,"code":"var _jsxFileName = \"D:\\\\VS_Code\\\\VS_Code_general_Workspace\\\\finalYearProject\\\\chatApp\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png';\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from 'uuid';\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport Jimp from 'jimp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const newJimp = new Jimp();\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      const reader = new FileReader();\n      let fileData = null; // Set up the FileReader onload event\n\n      reader.onload = function (e) {\n        // Get the file data\n        fileData = e.target.result;\n      }; // Read the file as a data URL\n\n\n      reader.readAsDataURL(img);\n      newJimp.read(fileData);\n      uploadTask.on(error => {// setErr(true);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          id: uuid(),\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    }\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        id: \"file\",\n        onChange: e => setImg(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: im,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"q//4GW5ClIVGNoMS/xADfe+Jtn4=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/components/Input.jsx"],"names":["React","useContext","useState","at","im","AuthContext","ChatContext","Timestamp","arrayUnion","doc","serverTimestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Jimp","Input","text","setText","img","setImg","currentUser","data","handleSend","storageRef","newJimp","uploadTask","reader","FileReader","fileData","onload","e","target","result","readAsDataURL","read","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","value","display","files"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport at from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/at.png'\r\nimport im from 'D:/VS_Code/VS_Code_general_Workspace/finalYearProject/chatApp/src/images/im.jpg'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { ChatContext } from '../context/ChatContext'\r\nimport { Timestamp, arrayUnion, doc, serverTimestamp, updateDoc } from 'firebase/firestore'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\nimport Jimp from 'jimp'; \r\nconst Input = () => {\r\n  const [text,setText]=useState(\"\")\r\n  const [img,setImg]=useState(null)\r\n  const {currentUser}=useContext(AuthContext)\r\n  const {data}=useContext(ChatContext)\r\n\r\n\r\n\r\n\r\n  const handleSend=async()=>{\r\n    if(img){\r\n        const storageRef = ref(storage, uuid());\r\n        const newJimp= new Jimp();\r\n        const uploadTask = uploadBytesResumable(storageRef, img);\r\n\r\n        const reader = new FileReader();\r\n        let fileData =null;\r\n\r\n    // Set up the FileReader onload event\r\n    reader.onload = function(e) {\r\n      // Get the file data\r\n        fileData=e.target.result;\r\n    };\r\n\r\n    // Read the file as a data URL\r\n    reader.readAsDataURL(img);\r\n    newJimp.read(fileData)\r\n        uploadTask.on(\r\n          (error) => {\r\n            // setErr(true);\r\n          },\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n              await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                messages: arrayUnion({\r\n                  id: uuid(),\r\n                  text,\r\n                  senderId: currentUser.uid,\r\n                  date: Timestamp.now(),\r\n                  img: downloadURL,\r\n                }),\r\n              });\r\n            });\r\n          }\r\n        );\r\n    } else{\r\n      await updateDoc(doc(db,\"chats\",data.chatId),{\r\n        messages:arrayUnion({\r\n          id:uuid(),\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now()\r\n        })\r\n      })\r\n    }\r\n    await updateDoc(doc(db,\"userChats\",currentUser.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n    await updateDoc(doc(db,\"userChats\",data.user.uid),{\r\n      [data.chatId+\".lastMessage\"]:{\r\n        text\r\n      },\r\n      [data.chatId+\".date\"]:serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder='Type...' onChange={e=>setText(e.target.value)} value={text} />\r\n      <div className=\"send\">\r\n        {/* <img src={at} alt=\"\" /> */}\r\n        <input type='file' style={{display:'none'}} id='file' onChange={e=>setImg(e.target.files[0])}/>\r\n        <label htmlFor=\"file\">\r\n          <img src={im} alt=\"\"/>\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Input"]},"metadata":{},"sourceType":"module"}